#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#

include "NewtonBaseSignals.nt"

#
#	Newton Description for the sensor SCD30 starts here.
#
#	Figures quoted here are referenced from Sensirion SCD30 CO2, humidity and temperature sensor data sheet prelim version 0.9 and interface description.
#
#	The constant is a value which can never be generated by the sensor. We use that to denote “impossible” or “invalid” readings.
#
kSCD30CO2ConcentrationErasureToken	: constant = 16rFEFE;
kSCD30HumidityErasureToken		: constant = 16rFEFE;
kSCD30TemperatureErasureToken		: constant = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kSCD30CO2ConcentrationStdev		: constant = -1;
kSCD30HumidityStdev			: constant = -1;
kSCD30TemperatureStdev			: constant = -1;

SCD30: sensor (
			scd30co2	: concentration,
			scd30humidity	: relativeHumidity,
			scd30temperature: temperature
			) =

{
	#
	#	The full range of the sensor
	#
	#	Range of scd30co2 can be found in Table 1 of document 1 on page 3 of data sheet.
	#
	#	The units of scd30co2 is ppm.
	#
	range scd30co2 == [0 ppm, 40000 ppm],

	#
	#	Range of scd30humidity can be found in Table 2 of document 1 on page 3 of data sheet.
	#
	#	The units of humidity is %RH which is the measured relative humidity value.
	#
	range scd30humidity == [0 RH, 100 RH],

	#
	#	Range of scd30temperature can be found in Table 3 of document 1 on page 3 of data sheet.
	#
	range scd30temperature == [233.15 K, 343.15 K],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of the sensor can be found in document 1.1.1 of interface description on page 2.
	#
	#	Command of obtaining 18 byte Sensor data can be found in document 1.3.5 of interface description on page 10.
	#
	#	The order of the read-out stream can be found in Table 2 of document 1.3.5 of interface description on page 11.
	#
	interface scd30co2 == i2c (address: 16r61)
	{
		#
		#	Get concentration data of 4 bytes...
		#
		18BYTEDATA = read [18] 16r0300;
		CO2 = (18BYTEDATA[1] << 24) | (18BYTEDATA[2] << 16) | (18BYTEDATA[4] << 8) | (18BYTEDATA[5]);
	},

	interface scd30humidity == i2c (address: 16r61)
	{
		#
		#	Get Humid data Of 4 bytes...
		#
		18BYTEDATA = read [18] 16r0300;
		scd30humidity = (18BYTEDATA[13] << 24) | (18BYTEDATA[14] << 16) | (18BYTEDATA[16] << 8) | (18BYTEDATA[17]]);
	},
	
	interface scd30temperature == i2c (address: 16r61)
	{
		#
		#	Get Temp data of 4 bytes...
		#
		18BYTEDATA = read [18] 16r0300;
		scd30temperature = (18BYTEDATA[7] << 24) | (18BYTEDATA[8] << 16) | (18BYTEDATA[10] << 8) | (18BYTEDATA[11]);
	},

	#
	#	Uncertainty/noise model of the sensor as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty scd30co2 == Gaussian(scd30co2, kSCD30CO2ConcentrationStdev)*g,
	uncertainty scd30humidity == Gaussian(scd30humidity, kSCD30HumidityStdev)*g,
	uncertainty scd30temperature == Gaussian(scd30temperature, kSCD30TemperatureStdev)*g,

	#
	#	When this token is returned by the sensor, it denotes invalid sensed value / erasure in communication with sensor.
	#
	erasuretoken scd30co2 == kSCD30CO2ConcentrationErasureToken,
	erasuretoken scd30humidity == kSCD30HumidityErasureToken,
	erasuretoken scd30temperature == kSCD30TemperatureErasureToken,

	#
	#	Precision settings list for the sensor. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision scd30co2 == {
					(32*bits, -1),
				},

	precision scd30humidity == {
					(32*bits, -1),
				},
	
	precision scd30temperature == {
					(32*bits, -1),
				},

	#
	#	Accuracy settings list for the sensor. This is a list of (accuracy, cost) pairs.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	#	Accuracy of CO2 Sensor can be found in Table 1 of document 1 of data sheet on page 3.
	#
	accuracy scd30co2 == {
					(30*ppm, -1),
				},

	#
	#	Accuracy values of scd30humidity Sensor can be found in Table 2 of document 1 of data sheet on page 3.
	#
	accuracy scd30humidity == {
					(2*RH, -1),
				},
				
	#
	#	Accuracy of scd30temperature Sensor can be found in Table 3 of document 1 of data sheet on page 3.
	#
	accuracy scd30temperature == {
					(0.3*K, -1),
				}
}
