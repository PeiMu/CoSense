#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#
include "NewtonBaseSignals.nt"

#
#	Description: Additional signal used in this particular newton description.
#
noise : signal =
{
	name = "micro g per square root of Hertz" English;
	symbol = "n";
	derivation = (10 ** -6) * acceleration / (frequency ** 0.5);
}

#
#	Newton Description for the sensor MMA8451Q starts here.
#
#	Figures quoted here are referenced from freescale MMA8451Q Accelerometer data sheet revision 8.1.
#
#	The constant is a value which can never be generated by the sensor. We use that to denote “impossible” or “invalid” readings.
#
kMMA8451QxAccelerationErasureToken: const = 16rFEFE;
kMMA8451QyAccelerationErasureToken: const = 16rFEFE;
kMMA8451QzAccelerationErasureToken: const = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kMMA8451QxAccelerationStdev: const = ;
kMMA8451QyAccelerationStdev: const = ;
kMMA8451QzAccelerationStdev: const = ;

MMA8451Q: sensor (
			xAccel: acceleration@0,
			yAccel: acceleration@1,
			zAccel: acceleration@2
		)

{
	#
	#	The full range of the sensor
	#
	#	Range of Acceleration can be found in Table 75 of document 6.9 on page 47.
	#
	range xAcceleration == [-8*mj .. 8*mj],
	range yAcceleration == [-8*mj .. 8*mj],
	range zAcceleration == [-8*mj .. 8*mj],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of Accelerometer can be found in Table 10 of document 5.11.1 on page 17.
	#
	#	Register address of Accelerometer can be found in Table 12 of document 6 on page 19.
	#
	interface xAcceleration@8*bits == "i2c" (address: "0x1C")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get xAccel data...
		#
		xAcceleration@8*bits = read 16r01;
	},

	interface xAcceleration@14*bits == "i2c" (address: "0x1C")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of xAccel data...
		#
		OUT_X_MSB = read 16r01;
		OUT_X_LSB = read 16r02;
		xAcceleration@14*bits = (OUT_X_MSB << 6) | (OUT_X_LSB >> 2);
	},
	
	interface yAcceleration@8*bits == "i2c" (address: "0x1C")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get yAccel data...
		#
		yAcceleration@8*bits = read 16r03;
	},
	
	interface yAcceleration@14*bits == "i2c" (address: "0x1C")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of yAccel data...
		#
		OUT_Y_MSB = read 16r03;
		OUT_Y_LSB = read 16r04;
		yAcceleration@14*bits = (OUT_Y_MSB << 6) | (OUT_Y_LSB >> 2);
	},
	
	interface zAcceleration@8*bits == "i2c" (address: "0x1C")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get zAccel data...
		#
		zAcceleration@8*bits = read 16r05;
	},

	interface zAcceleration@14*bits == "i2c" (address: "0x1C")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of zAccel data...
		#
		OUT_Z_MSB = read 16r05;
		OUT_Z_LSB = read 16r06;
		zAcceleration@14*bits = (OUT_Z_MSB << 6) | (OUT_Z_LSB >> 2);
	},

	#
	#	Uncertainty/noise model of the sensor as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty xAcceleration == Gaussian(xAcceleration, kMMA8451QxAccelerationStdev)*g,
	uncertainty yAcceleration == Gaussian(yAcceleration, kMMA8451QyAccelerationStdev)*g,
	uncertainty zAcceleration == Gaussian(zAcceleration, kMMA8451QzAccelerationStdev)*g,

	#
	#	When this token is returned by the sensor, it denotes invalid sensed value / erasure in communication with sensor.
	#
	erasuretoken xAcceleration == kMMA8451QxAccelerationErasureToken,
	erasuretoken yAcceleration == kMMA8451QyAccelerationErasureToken,
	erasuretoken zAcceleration == kMMA8451QzAccelerationErasureToken,

	#
	#	Precision settings list for the sensor. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision xAcceleration == {
					(8*bits, nil),
					(14*bits, nil),
				},

	precision yAcceleration == {
					(8*bits, nil),
					(14*bits, nil),
				},

	precision zAcceleration == {
					(8*bits, nil),
					(14*bits, nil),
				},

	#
	#	Accuracy settings list for the sensor. This is a list of (accuracy, cost) pairs.
	#
	#	Noise values are used here for accuracy.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	#	Noise values of Accelerometer can be found in features on page 1 and Table 2 of document 2.1 on page 6.
	#
	accuracy xAcceleration == {
					(99*n, nil),
					(126*n, nil),
				},

	accuracy yAcceleration == {
					(99*n, nil),
					(126*n, nil),
				},

	accuracy zAcceleration == {
					(99*n, nil),
					(126*n, nil),
				}
}
