#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#

include "NewtonBaseSignals.nt"

#
#	Newton Description for the sensor LPS25H starts here.
#
#	Figures quoted here are referenced from Life Augmented LPS25H Barometer data sheet revision 3.
#
#	The constant is a value which can never be generated by the sensor. We use that to denote “impossible” or “invalid” readings.
#
kLPS25HTemperatureErasureToken	: constant = 16rFEFE;
kLPS25HPressureErasureToken	: constant = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kLPS25HTemperatureStdev		: constant = -1;
kLPS25HPressureStdev		: constant = -1;

LPS25H: sensor (
			lps25hTemperature: temperature,
			lps25hPressure: pressure
			) =

{
	#
	#	The full range of the sensor
	#
	#	Range of lps25hTemperature can be found in Table 3 of document 2.1 on page 7.
	#
	range lps25hTemperature == [243.15 K, 378.15 K],
	
	#
	#	Range of lps25hPressure can be found in features on page 1.
	#
	range lps25hPressure == [26000 Pa, 126000 Pa],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of Barometer can be found in document 5.2.1 on page 16 assuming SA0 pad is connected to ground.
	#
	#	Register address of lps25hTemperature Sensor can be found in Table 15 of document 6 on page 21.
	#
	interface lps25hTemperature == i2c (address: 16r5C)
	{
		#
		#	Get MSB and LSB of Temp data...
		#
		TEMP_OUT_H = read 16r2C;
		TEMP_OUT_L = read 16r2B;
		lps25hTemperature = (TEMP_OUT_H << 8) | (TEMP_OUT_L);
	},

	interface lps25hTemperature == spi ()
	{
		#
		#	Get MSB and LSB of Temp data...
		#
		TEMP_OUT_H = read 16r2C;
		TEMP_OUT_L = read 16r2B;
		lps25hTemperature = (TEMP_OUT_H << 8) | (TEMP_OUT_L);
	},

	#
	#	Register address of Pressure Sensor can be found in Table 15 of document 6 on page 21.
	#
	interface lps25hPressure == i2c (address: 16r5C)
	{
		#
		#	Get MSB, LSB and XLSB of Press data...
		#
		PRESS_OUT_H = read 16r2A;
		PRESS_OUT_L = read 16r29;
		PRESS_POUT_XL = read 16r28;
		lps25hPressure = (PRESS_OUT_H << 16) | (PRESS_OUT_L << 8) | (PRESS_POUT_XL);
	},
	
	interface lps25hPressure == spi ()
	{
		#
		#	Get MSB, LSB and XLSB of Press data...
		#
		PRESS_OUT_H = read 16r2A;
		PRESS_OUT_L = read 16r29;
		PRESS_POUT_XL = read 16r28;
		lps25hPressure = (PRESS_OUT_H << 16) | (PRESS_OUT_L << 8) | (PRESS_POUT_XL);
	},

	#
	#	Uncertainty/noise model of the sensor as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty lps25hTemperature == Gaussian(lps25hTemperature, kLPS25HTemperatureStdev)*K,
	uncertainty lps25hPressure == Gaussian(lps25hPressure, kLPS25HPressureStdev)*K,

	#
	#	When this token is returned by the sensor, it denotes invalid sensed value / erasure in communication with sensor.
	#
	erasuretoken lps25hTemperature == kLPS25HTemperatureErasureToken,
	erasuretoken lps25hPressure == kLPS25HPressureErasureToken,

	#
	#	Precision settings list for the sensor. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision lps25hTemperature == {
					(16*bits, -1),
				},

	precision lps25hPressure == {
					(24*bits, -1),
				},

	#
	#	Accuracy settings list for the sensor. This is a list of (accuracy, cost) pairs.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	#	Accuracy of Temperature Sensor can be found in Table 3 of document 2.1 on page 7.
	#
	accuracy lps25hTemperature == {
					(2*K, -1),
				},

	#
	#	Accuracy values of Pressure Sensor can be found in Table 3 of document 2.1 on page 7.
	#
	accuracy lps25hPressure == {
					(100*Pa, -1),
					(20*Pa, -1)
				}
}
