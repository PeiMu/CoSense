#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#

include "NewtonBaseSignals.nt"

#
#	Description: Additional signal used in this particular newton description.
#
microMagneticFluxDensity : signal =
{
	name = "micro Tesla" English;
	symbol = uT;
	derivation = 1E-6 * magneticFluxDensity;
}

#
#	Newton Description for the sensor MAG3110 starts here.
#
#	Figures quoted here are referenced from freescale Sensor data sheet revision 9.2.
#
#	The constant is a value which can never be generated by the sensor. We use that to denote “impossible” or “invalid” readings.
#
kMAG3110xMagneticFluxDensityErasureToken	: constant = 16rFEFE;
kMAG3110yMagneticFluxDensityErasureToken	: constant = 16rFEFE;
kMAG3110zMagneticFluxDensityErasureToken	: constant = 16rFEFE;
kMAG3110TemperatureErasureToken			: constant = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kMAG3110xMagneticFluxDensityStdev		: constant = -1;
kMAG3110yMagneticFluxDensityStdev		: constant = -1;
kMAG3110zMagneticFluxDensityStdev		: constant = -1;
kMAG3110TemperatureStdev			: constant = -1;

MAG3110: sensor (
			mag3110xMagneticFluxDensity: magneticFluxDensity@0,
			mag3110yMagneticFluxDensity: magneticFluxDensity@1,
			mag3110zMagneticFluxDensity: magneticFluxDensity@2,
			mag3110Temperature: temperature
			) =
{
	#
	#	The full range of the sensor
	#
	#	Range of Magnetic Field Density can be found in Table 3 of document 2.1 on page 5.
	#
	range mag3110xMagneticFluxDensity == [-1000E-3 T, 1000E-3 T],
	range mag3110yMagneticFluxDensity == [-1000E-3 T, 1000E-3 T],
	range mag3110zMagneticFluxDensity == [-1000E-3 T, 1000E-3 T],

	#
	#	Range of mag3110Temperature can be found in Table 3 of document 2.1 on page 5.
	#
	range mag3110Temperature == [233.15 K, 358.15 K],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of Magnetometer can be found in Table 1 on page 1.
	#
	#	Register address of Magnetometer can be found in Table 11 of document 5 on page 15.
	#
	interface mag3110xMagneticFluxDensity == i2c (address: 16r0E)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#	
		#	Get MSB and LSB of mag3110mag3110xMagneticFluxDensity data...
		#
		OUT_X_MSB = read 16r01;
		OUT_X_LSB = read 16r02;
		mag3110xMagneticFluxDensity = (OUT_X_MSB << 8) | (OUT_X_LSB);
	},

	interface mag3110yMagneticFluxDensity == i2c (address: 16r0E)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of mag3110mag3110yMagneticFluxDensity data...
		#
		OUT_Y_MSB = read 16r03;
		OUT_Y_LSB = read 16r04;
		mag3110yMagneticFluxDensity = (OUT_Y_MSB << 8) | (OUT_Y_LSB);
	},

	interface mag3110zMagneticFluxDensity == i2c (address: 16r0E)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of mag3110mag3110zMagneticFluxDensity data...
		#
		OUT_Z_MSB = read 16r05;
		OUT_Z_LSB = read 16r06;
		mag3110zMagneticFluxDensity = (OUT_Z_MSB << 8) | (OUT_Z_LSB);
	},

	#
	#	Temperature sensor is part of the magnetometer so i2c address of Temperature Sensor is also 16r0E.
	#
	#	Register address of temperature sensor can be found in Table 11 of document 5 on page 15.
	#
	interface mag3110Temperature == "i2c" (address: 16r0E)
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#	
		#	Get Temp data...
		#
		mag3110Temperature = read 16r10;
	},

	#
	#	Uncertainty/noise model of the sensor as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty mag3110xMagneticFluxDensity == Gaussian(mag3110xMagneticFluxDensity, kMAG3110xMagneticFluxDensityStdev)*g,
	uncertainty mag3110yMagneticFluxDensity == Gaussian(mag3110yMagneticFluxDensity, kMAG3110yMagneticFluxDensityStdev)*g,
	uncertainty mag3110zMagneticFluxDensity == Gaussian(mag3110zMagneticFluxDensity, kMAG3110zMagneticFluxDensityStdev)*g,
	uncertainty mag3110Temperature == Gaussian(mag3110Temperature, kMAG3110TemperatureStdev)*g,

	#
	#	When this token is returned by the sensor, it denotes invalid sensed value / erasure in communication with sensor.
	#
	erasuretoken mag3110xMagneticFluxDensity == kMAG3110xMagneticFluxDensityErasureToken,
	erasuretoken mag3110yMagneticFluxDensity == kMAG3110yMagneticFluxDensityErasureToken,
	erasuretoken mag3110zMagneticFluxDensity == kMAG3110zMagneticFluxDensityErasureToken,
	erasuretoken mag3110Temperature == kMAG3110TemperatureErasureToken,

	#
	#	Precision settings list for the sensor. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Cost has a unit of microwatts.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision mag3110xMagneticFluxDensity == {
						(16*bits, -1),
					},

	precision mag3110yMagneticFluxDensity == {
						(16*bits, -1),
					},

	precision mag3110zMagneticFluxDensity == {
						(16*bits, -1),
					},
	precision mag3110Temperature == {
					(8*bits, -1),
				},

	#
	#	Accuracy settings list for the sensor. This is a list of (accuracy, cost) pairs.
	#
	#	Noise values are used here for accuracy.
	#
	#	Noise values of Magnetometer can be found in Table 32 of document 5.1.1 on page 20.
	#
	accuracy mag3110xMagneticFluxDensity == {
						(0.40*uT, -1),
						(0.35*uT, -1),
						(0.30*uT, -1),
						(0.25*uT, -1),
					},

	accuracy mag3110yMagneticFluxDensity == {
						(0.40*uT, -1),
						(0.35*uT, -1),
						(0.30*uT, -1),
						(0.25*uT, -1),
					},

	accuracy mag3110zMagneticFluxDensity == {
						(0.40*uT, -1),
						(0.35*uT, -1),
						(0.30*uT, -1),
						(0.25*uT, -1),
					},

	#
	#	Could not find the accuracy value of the Temperature Sensor.
	#
	accuracy mag3110Temperature == {
					(-1, -1),
				}
}
