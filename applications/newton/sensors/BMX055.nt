#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*		Redistributions of source code must retain the above
#			copyright notice, this list of conditions and the following
#			disclaimer.
#
#	*		Redistributions in binary form must reproduce the above
#			copyright notice, this list of conditions and the following
#			disclaimer in the documentation and/or other materials
#			provided with the distribution.
#
#	*		Neither the name of the author nor the names of its
#			contributors may be used to endorse or promote products
#			derived from this software without specific prior written
#			permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#
include "NewtonBaseSignals.nt"

#
#	Description: Additional signals used in this particular newton description.
#
noise : signal =
{
	name = "micro g per square root of Hertz" English;
	symbol = "n";
	derivation = (10 ** -6) * acceleration / (frequency ** 0.5);
}

microMagneticFluxDensity : signal =
{
	name = "micro Tesla" English;
	symbol = "uT";
	derivation = (10 ** -6) * magneticFluxDensity;
}

#
#	Newton Description for the sensor BMX055 starts here.
#
#	Figures quoted here are referenced from Bosch BMX055 Sensor Module data sheet revision 1.0.
#
#	The constant is a value which can never be generated by the sensor. We use that to denote “impossible” or “invalid” readings.
#
kBMX055xAccelerationErasureToken: const = 16rFEFE;
kBMX055yAccelerationErasureToken: const = 16rFEFE;
kBMX055zAccelerationErasureToken: const = 16rFEFE;
kBMX055TemperatureErasureToken: const = 16rFEFE;

kBMX055xMagneticFluxDensityErasureToken: const = 16rFEFE;
kBMX055yMagneticFluxDensityErasureToken: const = 16rFEFE;
kBMX055zMagneticFluxDensityErasureToken: const = 16rFEFE;

kBMX055xAngularRateErasureToken: const = 16rFEFE;
kBMX055yAngularRateErasureToken: const = 16rFEFE;
kBMX055zAngularRateErasureToken: const = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kBMX055xAccelerationStdev: const = ;
kBMX055yAccelerationStdev: const = ;
kBMX055zAccelerationStdev: const = ;
kBMX055TemperatureStdev: const = ;

kBMX055xMagneticFluxDensityStdev: const = ;
kBMX055yMagneticFluxDensityStdev: const = ;
kBMX055zMagneticFluxDensityStdev: const = ;

kBMX055xAngularRateStdev: const = ;
kBMX055yAngularRateStdev: const = ;
kBMX055zAngularRateStdev: const = ;

bmx055: sensor (
			xAccel: acceleration@0,
			yAccel: acceleration@1,
			zAccel: acceleration@2,
			Temp: temperature,

			xMagneto: magneticFluxDensity@0,
			yMagneto: magneticFluxDensity@1,
			zMagneto: magneticFluxDensity@2,

			xAngularRate: angularRate@0,
			yAngularRate: angularRate@1,
			zAngularRate: angularRate@2
		)
{
	#
	#	The full range of the sensor
	#
	#	Range of Acceleration can be found in Table 2 on page 11.
	#
	range xAcceleration == [-16*mj .. 16*mj],
	range yAcceleration == [-16*mj .. 16*mj],
	range zAcceleration == [-16*mj .. 16*mj],

	#
	#	Range of Temperature can be found in Table 2 on page 11.
	#
	range Temperature == [233.15*K .. 358.15*K],

	#
	#	Range of Magnetic Field Density can be found in Table 4 on page 17.
	#
	range xMagneticFluxDensity == [-1300*uT .. 1300*uT],
	range yMagneticFluxDensity == [-1300*uT .. 1300*uT],
	range zMagneticFluxDensity == [-2500*uT .. 2500*uT],

	#
	#	Range of Angular Rate can be found in Table 3 on page 14.
	#
	range xAngularRate == [0*aj .. 2000*aj],
	range yAngularRate == [0*aj .. 2000*aj],
	range zAngularRate == [0*aj .. 2000*aj],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of Accelerometer can be found in Table 64 on page 145.
	#
	#	Register address of Accelerometer can be found in Figure 12 of document 6.2 on page 49.
	#
	interface xAcceleration == "i2c" (address: "0x18")
	{

		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of xAccel data...
		#
		xAccelHigh = read 16r03;
		xAccelLow = read 16r02;
		xAcceleration = (xAccelHigh << 4) | (xAccelLow >> 4);
	},

	interface yAcceleration == "i2c" (address: "0x18")
	{

		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of yAccel data...
		#
		yAccelHigh = read 16r05;
		yAccelLow = read 16r04;
		yAcceleration = (yAccelHigh << 4) | (yAccelLow >> 4);
	},

	interface zAcceleration == "i2c" (address: "0x18")
	{

		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of zAccel data...
		#
		zAccelHigh = read 16r07;
		zAccelLow = read 16r06;
		zAcceleration = (zAccelHigh << 4) | (zAccelLow >> 4);
	},

	#
	#	Temperature sensor is part of the accelerometer so i2c address of Temperature Sensor is also 0x18.
	#
	#	Register address of temperature sensor can be found in Figure 12 of document 6.2 on page 49.
	#
	interface Temperature == "i2c" (address: "0x18")
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#	
		#	Get Temp data...
		#
		Temperature = read 16r08;
	},

	#
	#	i2c address of Magnetometer can be found in Table 64 on page 145.
	#
	#	Register address of Magnetometer can be found in document 10.2 on page 130.
	#
	interface xMagneticFluxDensity == "i2c" (address: "0x10")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#	
		#	Get MSB and LSB of xMagneto data...
		#
		xMagnetoHigh = read 16r43;
		xMagnetoLow = read 16r42;
		xMagneticFluxDensity = (xMagnetoHigh << 5) | (xMagnetoLow >> 3);
	},

	interface yMagneticFluxDensity == "i2c" (address: "0x10")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of yMagneto data...
		#
		yMagnetoHigh = read 16r45;
		yMagnetoLow = read 16r44;
		yMagneticFluxDensity = (yMagnetoHigh << 5) | (yMagnetoLow >> 3);
	},

	interface zMagneticFluxDensity == "i2c" (address: "0x10")
	{

		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of zMagneto data...
		#
		zMagnetoHigh = read 16r47;
		zMagnetoLow = read 16r46;
		zMagneticFluxDensity = (zMagnetoHigh << 7) | (zMagnetoLow >> 1);
	},

	#
	#	i2c address of Gyroscope can be found in Table 64 on page 145.
	#
	#	Register address of Gyroscope can be found in Figure 19 of document 8.2 on page 92.
	#
	interface xAngularRate == "i2c" (address: "0x68")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of xAngularRate data...
		#
		xAngularRateHigh = read 16r03;
		xAngularRateLow = read 16r02;
		xAngularRate = (xAngularRateHigh << 8) | (xAngularRateLow);
	},

	interface yAngularRate == "i2c" (address: "0x68")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of yAngularRate data...	
		#
		yAngularRateHigh = read 16r05;
		yAngularRateLow = read 16r04;
		yAngularRate = (yAngularRateHigh << 8) | (yAngularRateLow);
	},

	interface zAngularRate == "i2c" (address: "0x68")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of zAngularRate data...
		#
		zAngularRateHigh = read 16r07;
		zAngularRateLow = read 16r06;
		zAngularRate = (zAngularRateHigh << 8) | (zAngularRateLow);
	},

	#
	#	Uncertainty/noise model of the sensor as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty xAcceleration == Gaussian(xAcceleration, kBMX055xAccelerationStdev)*g,
	uncertainty yAcceleration == Gaussian(yAcceleration, kBMX055yAccelerationStdev)*g,
	uncertainty zAcceleration == Gaussian(zAcceleration, kBMX055zAccelerationStdev)*g,
	uncertainty Temperature == Gaussian(Temperature, kBMX055TemperatureStdev)*g,

	uncertainty xMagneticFluxDensity == Gaussian(xMagneticFluxDensity, kBMX055xMagneticFluxDensityStdev)*g,
	uncertainty yMagneticFluxDensity == Gaussian(yMagneticFluxDensity, kBMX055yMagneticFluxDensityStdev)*g,
	uncertainty zMagneticFluxDensity == Gaussian(zMagneticFluxDensity, kBMX055zMagneticFluxDensityStdev)*g,

	uncertainty xAngularRate == Gaussian(xAngularRate, kBMX055xAngularRateStdev)*g,
	uncertainty yAngularRate == Gaussian(yAngularRate, kBMX055yAngularRateStdev)*g,
	uncertainty zAngularRate == Gaussian(zAngularRate, kBMX055zAngularRateStdev)*g,

	#
	#	When this token is returned by the sensor, it denotes invalid sensed value / erasure in communication with sensor.
	#
	erasuretoken xAcceleration == kBMX055xAccelerationErasureToken,
	erasuretoken yAcceleration == kBMX055yAccelerationErasureToken,
	erasuretoken zAcceleration == kBMX055zAccelerationErasureToken,
	erasuretoken Temperature == kBMX055TemperatureErasureToken,

	erasuretoken xMagneticFluxDensity == kBMX055xMagneticFluxDensityErasureToken,
	erasuretoken yMagneticFluxDensity == kBMX055yMagneticFluxDensityErasureToken,
	erasuretoken zMagneticFluxDensity == kBMX055zMagneticFluxDensityErasureToken,

	erasuretoken xAngularRate == kBMX055xAngularRateErasureToken,
	erasuretoken yAngularRate == kBMX055yAngularRateErasureToken,
	erasuretoken zAngularRate == kBMX055zAngularRateErasureToken,

	#
	#	Precision settings list for the sensor. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Cost has a unit of microwatts.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision xAcceleration == {
					(12*bits, 0),
				},

	precision yAcceleration == {
					(12*bits, 0),
				},

	precision zAcceleration == {
					(12*bits, 0),
				},

	precision Temperature == {
					(8*bits, 0),
				},

	precision xMagneticFluxDensity == {
						(13*bits, 0),
					},

	precision yMagneticFluxDensity == {
						(13*bits, 0),
					},

	precision zMagneticFluxDensity == {
						(15*bits, 0),
					},

	precision xAngularRate == {
					(16*bits, 0),
				},

	precision yAngularRate == {
					(16*bits, 0),
				},

	precision zAngularRate == {
					(16*bits, 0),
				},

	#
	#	Accuracy settings list for the sensor. This is a list of (accuracy, cost) pairs.
	#
	#	Noise and offset values are used here for accuracy.
	#
	#	Noise values of Accelerometer can be found in Table 2 of document 1.2 on page 12.
	#
	#	Product of the total supply current and supply voltage in normal mode is used as the cost value.
	#
	#	Supply voltage is 2.4 V which is stated in the footnote on page 11.
	#
	#	Current values (normal mode) of Accelerometer can be found in Table 2 of document 1.2 on page 11.
	#
	accuracy xAcceleration == {
					(150*n, 312),
				},

	accuracy yAcceleration == {
					(150*n, 312),
				},

	accuracy zAcceleration == {
					(150*n, 312),
				},

	#
	#	Offset value of Temperature Sensor can be found in Table 2 of document 1.2 on page 12.
	#
	#	Product of the total supply current and supply voltage in normal mode is used as the cost value.
	#
	#	Current values (normal mode) of Temperature Sensor can be found in Table 2 of document 1.2 on page 11.
	#
	accuracy Temperature == {
					(4.0*K, 312),
				},

	#
	#	Noise values (normal mode with 4 different presets) of Magnetometer can be found in Table 37 of document 9.2.4 on page 122.
	#
	#	Product of the average current consumption and supply voltage in normal mode is used as the cost value.
	#
	#	Current values (normal mode with 4 different presets) of Magnetometer can be found in Table 37 of document 9.2.4 on page 122.
	#
	accuracy xMagneticFluxDensity == {
						(1.0*uT, 408),
						(0.6*uT, 1200),
						(0.5*uT, 1920),
						(0.3*uT, 11760),
					},

	accuracy yMagneticFluxDensity == {
						(1.0*uT, 408),
						(0.6*uT, 1200),
						(0.5*uT, 1920),
						(0.3*uT, 11760),
					},

	accuracy zMagneticFluxDensity == {
						(1.4*uT, 408),
						(0.6*uT, 1200),
						(0.5*uT, 1920),
						(0.3*uT, 11760),
					},

	#
	#	Noise values of Gyroscope can be found in Table 3 of document 1.2 on page 15.
	#
	#	Product of the total supply current and supply voltage in normal mode is used as the cost value.
	#
	#	Current values (normal mode) of Gyroscope can be found in Table 3 of document 1.2 on page 14.
	#
	accuracy xAngularRate == {
					(0.1*aj, 0.012),
				},

	accuracy xAngularRate == {
					(0.1*aj, 0.012),
				},

	accuracy xAngularRate == {
					(0.1*aj, 0.012),
				}
}
