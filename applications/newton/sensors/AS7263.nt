#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#
include "NewtonBaseSignals.nt"

#
#	Description: Additional signals used in this particular newton description.
#

power : signal =
{
	name = "Watts" English;
	symbol = "W";
	derivation = work / time;

irradianceResponsivity : signal =
{
	name = "counts per micro watts per square centimetres" English;
	symbol = "c";
	derivation = (10 ** 10) / (power * area);
}

#
#	Newton Description for the device AS7263 starts here.
#
#	Figures quoted here are referenced from AMS AS7263 Device data sheet (Nov 2016).
#
#	The constant is a value which can never be generated by the device. We use that to denote “impossible” or “invalid” readings.
#
kAS7263TemperatureErasureToken: const = 16rFEFE;
kAS7263Lambda610RErasureToken: const = 16rFEFE;
kAS7263Lambda680SErasureToken: const = 16rFEFE;
kAS7263Lambda730TErasureToken: const = 16rFEFE;
kAS7263Lambda760UErasureToken: const = 16rFEFE;
kAS7263Lambda810VErasureToken: const = 16rFEFE;
kAS7263Lambda860WErasureToken: const = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kAS7263TemperatureStdev: const = ;
kAS7263Lambda610RStdev: const = ;
kAS7263Lambda680SStdev: const = ;
kAS7263Lambda730TStdev: const = ;
kAS7263Lambda760UStdev: const = ;
kAS7263Lambda810VStdev: const = ;
kAS7263Lambda860WStdev: const = ;


AS7263: device (
			Temp: temperature
			Lambda610R: irradianceResponsivity@0,
			Lambda680S: irradianceResponsivity@1,
			Lambda730T: irradianceResponsivity@2,
			Lambda760U: irradianceResponsivity@3,
			Lambda810V: irradianceResponsivity@4,
			Lambda860W: irradianceResponsivity@5
		)
{

	#
	#	The full range of the device
	#
	#	Range of Temperature can be found in Figure 6 of Electrical Characteristics on page 6.
	#
	range Temperature == [233.15*K .. 358.15*K],
	
	#
	#	Range of irradiance can be found in Figure 12 of Optical Characteristics on page 11.
	#
	range Lambda610R == [0*c .. 35*c],
	range Lambda680S == [0*c .. 35*c],
	range Lambda730T == [0*c .. 35*c],
	range Lambda760U == [0*c .. 35*c],
	range Lambda810V == [0*c .. 35*c],
	range Lambda860W == [0*c .. 35*c],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of device can be found in Figure 18 on page 18.
	#
	#	Register address of temperature sensor can be found in Figure 21 of I2C Virtual Register Set on page 21.
	#
	interface Temperature == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get Temp data...
		#
		Temperature = read 16r06;
	},
	
	interface Temperature == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get Temp data...
		#
		Temperature = read 16r06;
	},

	#
	#	Register address of channel data can be found in Figure 21 of I2C Virtual Register Set on page 21.
	#
	interface Lambda610R@16*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda610R data...
		#
		R_High = read 16r08;
		R_Low = read 16r09;
		Lambda610R@16*bits = (R_High << 8) | (R_Low);
	},

	interface Lambda610R@16*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda610R data...
		#
		R_High = read 16r08;
		R_Low = read 16r09;
		Lambda610R@16*bits = (R_High << 8) | (R_Low);
	},

	interface Lambda610R@32*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda610R data...
		#
		R_Cal_High = read 16r14;
		R_Cal_Xhigh = read 16r15;
		R_Cal_Low = read 16r16;
		R_Cal_Xlow = read 16r17;
		Lambda610R@32*bits = (R_Cal_High << 24) |(R_Cal_Xhigh << 16) |(R_Cal_Low << 8) | (R_Cal_Xlow);
	},

	interface Lambda610R@32*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda610R data...
		#
		R_Cal_High = read 16r14;
		R_Cal_Xhigh = read 16r15;
		R_Cal_Low = read 16r16;
		R_Cal_Xlow = read 16r17;
		Lambda610R@32*bits = (R_Cal_High << 24) |(R_Cal_Xhigh << 16) |(R_Cal_Low << 8) | (R_Cal_Xlow);
	},
	
	interface Lambda680S@16*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda680S data...
		#
		S_High = read 16r0A;
		S_Low = read 16r0B;
		Lambda680S@16*bits = (S_High << 8) | (S_Low);
	},

	interface Lambda680S@16*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda680S data...
		#
		S_High = read 16r0A;
		S_Low = read 16r0B;
		Lambda680S@16*bits = (S_High << 8) | (S_Low);
	},

	interface Lambda680S@32*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda680S data...
		#
		S_Cal_High = read 16r18;
		S_Cal_Xhigh = read 16r19;
		S_Cal_Low = read 16r1A;
		S_Cal_Xlow = read 16r1B;
		Lambda680S@32*bits = (S_Cal_High << 24) |(S_Cal_Xhigh << 16) |(S_Cal_Low << 8) | (S_Cal_Xlow);
	},

	interface Lambda680S@32*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda680S data...
		#
		S_Cal_High = read 16r18;
		S_Cal_Xhigh = read 16r19;
		S_Cal_Low = read 16r1A;
		S_Cal_Xlow = read 16r1B;
		Lambda680S@32*bits = (S_Cal_High << 24) |(S_Cal_Xhigh << 16) |(S_Cal_Low << 8) | (S_Cal_Xlow);
	},

	interface Lambda730T@16*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda730T data...
		#
		T_High = read 16r0C;
		T_Low = read 16r0D;
		Lambda730T@16*bits = (T_High << 8) | (T_Low);
	},
	
	interface Lambda730T@16*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda730T data...
		#
		T_High = read 16r0C;
		T_Low = read 16r0D;
		Lambda730T@16*bits = (T_High << 8) | (T_Low);
	},
	
	interface Lambda730T@32*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda730T data...
		#
		T_Cal_High = read 16r1C;
		T_Cal_Xhigh = read 16r1D;
		T_Cal_Low = read 16r1E;
		T_Cal_Xlow = read 16r1F;
		Lambda730T@32*bits = (T_Cal_High << 24) |(T_Cal_Xhigh << 16) |(T_Cal_Low << 8) | (T_Cal_Xlow);
	},

	interface Lambda730T@32*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda730T data...
		#
		T_Cal_High = read 16r1C;
		T_Cal_Xhigh = read 16r1D;
		T_Cal_Low = read 16r1E;
		T_Cal_Xlow = read 16r1F;
		Lambda730T@32*bits = (T_Cal_High << 24) |(T_Cal_Xhigh << 16) |(T_Cal_Low << 8) | (T_Cal_Xlow);
	},

	interface Lambda760U@16*bits == "i2c" (address: "16r49")
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda760U data...
		#
		U_High = read 16r0E;
		U_Low = read 16r0F;
		Lambda760U@16*bits = (U_High << 8) | (U_Low);
	},
	
	interface Lambda760U@16*bits == "spi" ()
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda760U data...
		#
		U_High = read 16r0E;
		U_Low = read 16r0F;
		Lambda760U@16*bits = (U_High << 8) | (U_Low);
	},
	
	interface Lambda760U@32*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda760U data...
		#
		U_Cal_High = read 16r20;
		U_Cal_Xhigh = read 16r21;
		U_Cal_Low = read 16r22;
		U_Cal_Xlow = read 16r23;
		Lambda760U@32*bits = (U_Cal_High << 24) |(U_Cal_Xhigh << 16) |(U_Cal_Low << 8) | (U_Cal_Xlow);
	},

	interface Lambda760U@32*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda760U data...
		#
		U_Cal_High = read 16r20;
		U_Cal_Xhigh = read 16r21;
		U_Cal_Low = read 16r22;
		U_Cal_Xlow = read 16r23;
		Lambda760U@32*bits = (U_Cal_High << 24) |(U_Cal_Xhigh << 16) |(U_Cal_Low << 8) | (U_Cal_Xlow);
	},

	interface Lambda810V@16*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda810V data...
		#
		V_High = read 16r10;
		V_Low = read 16r11;
		Lambda810V@16*bits = (V_High << 8) | (V_Low);
	},
	
	interface Lambda810V@16*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda810V data...
		#
		V_High = read 16r10;
		V_Low = read 16r11;
		Lambda810V@16*bits = (V_High << 8) | (V_Low);
	},

	interface Lambda810V@32*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda810V data...
		#
		V_Cal_High = read 16r24;
		V_Cal_Xhigh = read 16r25;
		V_Cal_Low = read 16r26;
		V_Cal_Xlow = read 16r27;
		Lambda810V@32*bits = (V_Cal_High << 24) |(V_Cal_Xhigh << 16) |(V_Cal_Low << 8) | (V_Cal_Xlow);
	},

	interface Lambda810V@32*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda810V data...
		#
		V_Cal_High = read 16r24;
		V_Cal_Xhigh = read 16r25;
		V_Cal_Low = read 16r26;
		V_Cal_Xlow = read 16r27;
		Lambda810V@32*bits = (V_Cal_High << 24) |(V_Cal_Xhigh << 16) |(V_Cal_Low << 8) | (V_Cal_Xlow);
	},

	interface Lambda860W@16*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda860W data...
		#
		W_High = read 16r12;
		W_Low = read 16r13;
		Lambda860W@16*bits = (W_High << 8) | (W_Low);
	},
	
	interface Lambda860W@16*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda860W data...
		#
		W_High = read 16r12;
		W_Low = read 16r13;
		Lambda860W@16*bits = (W_High << 8) | (W_Low);
	},

	interface Lambda860W@32*bits == "i2c" (address: "16r49")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda860W data...
		#
		W_Cal_High = read 16r28;
		W_Cal_Xhigh = read 16r29;
		W_Cal_Low = read 16r2A;
		W_Cal_Xlow = read 16r2B;
		Lambda860W@32*bits = (W_Cal_High << 24) |(W_Cal_Xhigh << 16) |(W_Cal_Low << 8) | (W_Cal_Xlow);
	},

	interface Lambda810V@32*bits == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda860W data...
		#
		W_Cal_High = read 16r28;
		W_Cal_Xhigh = read 16r29;
		W_Cal_Low = read 16r2A;
		W_Cal_Xlow = read 16r2B;
		Lambda860W@32*bits = (W_Cal_High << 24) |(W_Cal_Xhigh << 16) |(W_Cal_Low << 8) | (W_Cal_Xlow);
	},

	#
	#	Uncertainty/noise model of the device as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty Temperature == Gaussian(Temperature, kAS7263TemperatureStdev)*g,
	uncertainty Lambda610R == Gaussian(Lambda610R, kAS7263Lambda610RStdev)*g,
	uncertainty Lambda680S == Gaussian(Lambda680S, kAS7263Lambda680SStdev)*g,
	uncertainty Lambda730T == Gaussian(Lambda610R, kAS7263Lambda730TStdev)*g,
	uncertainty Lambda760U == Gaussian(Lambda760U, kAS7263Lambda760UStdev)*g,
	uncertainty Lambda810V == Gaussian(Lambda810V, kAS7263Lambda810VStdev)*g,
	uncertainty Lambda860W == Gaussian(Lambda860W, kAS7263Lambda860WStdev)*g,
	
	#
	#	When this token is returned by the device, it denotes invalid sensed value / erasure in communication with device.
	#
	erasuretoken Temperature == kAS7263TemperatureErasureToken,
	erasuretoken Lambda610R == kAS7263Lambda610RErasureToken,
	erasuretoken Lambda680S == kAS7263Lambda680SErasureToken,
	erasuretoken Lambda730T == kAS7263Lambda730TErasureToken,
	erasuretoken Lambda760U == kAS7263Lambda760UErasureToken,
	erasuretoken Lambda810V == kAS7263Lambda810VErasureToken,
	erasuretoken Lambda860W == kAS7263Lambda860WErasureToken,

	#
	#	Precision settings list for the device. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Cost has a unit of microwatts.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision Temperature == {
					(8*bits, nil),
				},

	precision Lambda610R == {
					(16*bits, nil),
					(32*bits, nil),
				},

	precision Lambda680S == {
					(16*bits, nil),
					(32*bits, nil),
				},

	precision Lambda730T == {
					(16*bits, nil),
					(32*bits, nil),
				},

	precision Lambda760U == {
					(16*bits, nil),
					(32*bits, nil),
				},

	precision Lambda810V == {
					(16*bits, nil),
					(32*bits, nil),
				},

	precision Lambda860W == {
					(16*bits, nil),
					(32*bits, nil),
				},

	#
	#	Accuracy settings list for the device. This is a list of (accuracy, cost) pairs.
	#
	#	Accuracy values of device cannot be found.
	#
	accuracy Temperature == {
					(nil, nil),
				},

	accuracy Lambda610R == {
					(nil, nil),
				},

	accuracy Lambda680S == {
					(nil, nil),
				},

	accuracy Lambda730T == {
					(nil, nil),
				},

	accuracy Lambda760U == {
					(nil, nil),
				},

	accuracy Lambda810V == {
					(nil, nil),
				},

	accuracy Lambda860W == {
					(nil, nil),
				}
}
