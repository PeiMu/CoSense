#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#

include "NewtonBaseSignals.nt"

#
#	Newton Description for the sensor BMP180 starts here.
#
#	Figures quoted here are referenced from Bosch Sensortec BMP180 Barometer data sheet revision 2.5.
#
#	The constant is a value which can never be generated by the sensor. We use that to denote “impossible” or “invalid” readings.
#
kBMP180TemperatureErasureToken	: const = 16rFEFE;
kBMP180PressureErasureToken	: const = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kBMP180TemperatureStdev		: const = unknown;
kBMP180PressureStdev		: const = unknown;

BMP180: sensor (
			bmp180Temperature: temperature,
			bmp180Pressure: pressure
		)

{
	#
	#	The full range of the sensor
	#
	#	Range of Temperature can be found in Table 1 of document 1 on page 6.
	#
	range bmp180Temperature == [218.15*K .. 398.15*K],
	
	#
	#	Range of Pressure can be found in key features on page 2.
	#
	range bmp180Pressure == [30000*Pa .. 110000*Pa],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of Barometer can be found in Table 8 of document 5.4 on page 21.
	#
	#	Register address of Temperature Sensor can be found in Figure 6 of document 4 on page 18.
	#
	interface bmp180Temperature == i2c (address: 16r77)
	{
		#
		#	write to temperature value in register address 16rF4
		#
		write 16r2E 16rF4
		
		#
		#	Get MSB and LSB of Temp data...
		#
		out_t_msb = read 16rF6;
		out_t_lsb = read 16rF7;
		bmp180Temperature = (out_t_msb << 8) | (out_t_Lsb);
	},

	#
	#	Register address of Pressure Sensor can be found in Figure 6 of document 4 on page 18.
	#
	interface bmp180Pressure@16*bits == i2c (address: 16r77)
	{
		#
		#	write to pressure value (oss=0) in register address 16rF4
		#
		write 16r34 16rF4

		#
		#	Get MSB and LSB of Press data...
		#
		out_p_msb = read 16rF6;
		out_p_lsb = read 16rF7;
		bmp180Pressure@16*bits = (out_p_msb << 8) | (out_p_lsb);
	},
	
	#
	#	Datasheet states that we could extend it to 19 bits though the conversion is not given. However, extending it to 21 bits makes more sense to me.
	#
	interface bmp180Pressure@21*bits == i2c (address: 16r77)
	{
		#
		#	write to pressure value (oss=0) in register address 16rF4
		#
		write 16r34 16rF4

		#
		#	Get MSB, LSB and XLSB of Press data...
		#
		out_p_msb = read 16rF6;
		out_p_lsb = read 16rF7;
		out_p_xlsb = read 16rF8;
		bmp180Pressure@21*bits = (out_p_msb << 13) | (out_p_lsb << 5) | (out_p_xlsb >> 3);
	},

	#
	#	Uncertainty/noise model of the sensor as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty bmp180Temperature == Gaussian(Temperature, kBMP180TemperatureStdev)*g,
	uncertainty bmp180Pressure == Gaussian(Pressure, kBMP180PressureStdev)*g,

	#
	#	When this token is returned by the sensor, it denotes invalid sensed value / erasure in communication with sensor.
	#
	erasuretoken Temperature == kBMP180TemperatureErasureToken,
	erasuretoken bmp180Pressure == kBMP180PressureErasureToken,

	#
	#	Precision settings list for the sensor. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision bmp180Temperature == {
					(16*bits, unknown),
				},

	precision bmp180Pressure == {
					(16*bits, unknown),
					(21*bits, unknown),
				},

	#
	#	Accuracy settings list for the sensor. This is a list of (accuracy, cost) pairs.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	#	Accuracy of Temperature Sensor can be found in Table 1 of document 1 on page 6.
	#
	accuracy bmp180Temperature == {
					(0.5*K, unknown),
					(1*K, unknown),
				},

	#
	#	Accuracy values of Pressure Sensor for 4 power modes and advance resolution can be found in Table 3 of document 3.3.1 on page 12.
	#
	accuracy bmp180Pressure == {
					(6*Pa, unknown),
					(5*Pa, unknown),
					(4*Pa, unknown),
					(3*Pa, unknown),
					(2*Pa, unknown)
				}
}
