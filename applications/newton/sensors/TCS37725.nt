#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#

include "NewtonBaseSignals.nt"

#
#	Description: Additional signals used in this particular newton description.
#

irradianceResponsivity : signal =
{
	name		= "Counts per micro watts per square centimetres" English;
	symbol		= c;
	derivation	= 1/(1E-6 * power / (distance / 100)**2);
}

#
#	Newton Description for the sensor TCS37725 starts here.
#
#	Figures quoted here are referenced from TAOS145 TCS37725 Sensor data sheet (April 2012).
#
#	The constant is a value which can never be generated by the sensor. We use that to denote “impossible” or “invalid” readings.
#
kTCS37725LambdaDominant465BErasureToken: constant = 16rFEFE;
kTCS37725LambdaDominant465GErasureToken: constant = 16rFEFE;
kTCS37725LambdaDominant465RErasureToken: constant = 16rFEFE;
kTCS37725LambdaDominant465CErasureToken: constant = 16rFEFE;

kTCS37725LambdaDominant525BErasureToken: constant = 16rFEFE;
kTCS37725LambdaDominant525GErasureToken: constant = 16rFEFE;
kTCS37725LambdaDominant525RErasureToken: constant = 16rFEFE;
kTCS37725LambdaDominant525CErasureToken: constant = 16rFEFE;

kTCS37725LambdaDominant615BErasureToken: constant = 16rFEFE;
kTCS37725LambdaDominant615GErasureToken: constant = 16rFEFE;
kTCS37725LambdaDominant615RErasureToken: constant = 16rFEFE;
kTCS37725LambdaDominant615CErasureToken: constant = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kTCS37725LambdaDominant465BStdev: constant = -1;
kTCS37725LambdaDominant465GStdev: constant = -1;
kTCS37725LambdaDominant465RStdev: constant = -1;
kTCS37725LambdaDominant465CStdev: constant = -1;

kTCS37725LambdaDominant525BStdev: constant = -1;
kTCS37725LambdaDominant525GStdev: constant = -1;
kTCS37725LambdaDominant525RStdev: constant = -1;
kTCS37725LambdaDominant525CStdev: constant = -1;

kTCS37725LambdaDominant615BStdev: constant = -1;
kTCS37725LambdaDominant615GStdev: constant = -1;
kTCS37725LambdaDominant615RStdev: constant = -1;
kTCS37725LambdaDominant615CStdev: constant = -1;

TCS37725: sensor (
			Lambda465B: irradianceResponsivity@0,
			Lambda465G: irradianceResponsivity@1,
			Lambda465R: irradianceResponsivity@2,
			Lambda465C: irradianceResponsivity@3,

			Lambda525B: irradianceResponsivity@4,
			Lambda525G: irradianceResponsivity@5,
			Lambda525R: irradianceResponsivity@6,
			Lambda525C: irradianceResponsivity@7,

			Lambda615B: irradianceResponsivity@8,
			Lambda615G: irradianceResponsivity@9,
			Lambda615R: irradianceResponsivity@10,
			Lambda615C: irradianceResponsivity@11
			) =
{

	#
	#	The full range of the sensor
	#
	#	Range of Irradiance resposivity (ratio of the respective RGB channel values to the clear channel value) can be found in page 4.
	#
	range LambdaDominant465B == [7.15*c, 14.608*c],
	range LambdaDominant465G == [1.10*c, 6.972*c],
	range LambdaDominant465R == [0.0*c, 2.49*c],
	range LambdaDominant465C == [11.0*c, 16.6*c],
	
	range LambdaDominant525B == [1.32*c, 9*c],
	range LambdaDominant525G == [7.92*c, 11.22*c],
	range LambdaDominant525R == [0.528*c, 5*c],
	range LambdaDominant525C == [13.2*c, 20*c],
	
	range LambdaDominant615B == [0.78*c, 5.616*c],
	range LambdaDominant615G == [0*c, 3.276*c],
	range LambdaDominant615R == [12.48*c, 17.16*c],
	range LambdaDominant615C == [15.6*c, 23.4*c],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of light sensor can be found in page 3.
	#
	#	Register address of clear, red, green and blue data can be found in Table 17 on page 25.
	#
	interface LambdaDominant465B == i2c (address: 16r29)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda465B data...
		#
		B465DATAH = read 16r1B;
		B465DATA = read 16r1A;
		LambdaDominant465B = (B465DATAH << 8) | (B465DATA);
	},

	interface LambdaDominant465G == i2c (address: 16r29)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda465G data...
		#
		G465DATAH = read 16r19;
		G465DATA = read 16r18;
		LambdaDominant465G = (G465DATAH << 8) | (G465DATA);
	},

	interface LambdaDominant465R == i2c (address: 16r29)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda465R data...
		#
		R465DATAH = read 16r17;
		R465DATA = read 16r16;
		LambdaDominant465R = (R465DATAH << 8) | (R465DATA);
	},

	interface LambdaDominant465C == i2c (address: 16r29)
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda465C data...
		#
		C465DATAH = read 16r15;
		C465DATA = read 16r14;
		LambdaDominant465C = (C465DATAH << 8) | (C465DATA);
	},

	interface LambdaDominant525B == i2c (address: 16r29)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda525B data...
		#
		B525DATAH = read 16r1B;
		B525DATA = read 16r1A;
		LambdaDominant525B = (B525DATAH << 8) | (B525DATA);
	},

	interface LambdaDominant525G == i2c (address: 16r29)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda525G data...
		#
		G525DATAH = read 16r19;
		G525DATA = read 16r18;
		LambdaDominant525G = (G525DATAH << 8) | (G525DATA);
	},

	interface LambdaDominant525R == i2c (address: 16r29)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda525R data...
		#
		R525DATAH = read 16r17;
		R525DATA = read 16r16;
		LambdaDominant525R = (R525DATAH << 8) | (R525DATA);
	},

	interface LambdaDominant525C == i2c (address: 16r29)
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda525C data...
		#
		C525DATAH = read 16r15;
		C525DATA = read 16r14;
		LambdaDominant525C = (C525DATAH << 8) | (C525DATA);
	},

	interface LambdaDominant615B == i2c (address: 16r29)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda615B data...
		#
		B615DATAH = read 16r1B;
		B615DATA = read 16r1A;
		LambdaDominant615B = (B615DATAH << 8) | (B615DATA);
	},

	interface LambdaDominant615G == i2c (address: 16r29)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda615G data...
		#
		G615DATAH = read 16r19;
		G615DATA = read 16r18;
		LambdaDominant615G = (G615DATAH << 8) | (G615DATA);
	},

	interface LambdaDominant615R == i2c (address: 16r29)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda615R data...
		#
		R615DATAH = read 16r17;
		R615DATA = read 16r16;
		LambdaDominant615R = (R615DATAH << 8) | (R615DATA);
	},

	interface LambdaDominant615C == i2c (address: 16r29)
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda615C data...
		#
		C615DATAH = read 16r15;
		C615DATA = read 16r14;
		LambdaDominant615C = (C615DATAH << 8) | (C615DATA);
	},

	#
	#	Uncertainty/noise model of the sensor as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty LambdaDominant465B == Gaussian(LambdaDominant465B, kTCS37725LambdaDominant465BStdev)*g,
	uncertainty LambdaDominant465G == Gaussian(LambdaDominant465G, kTCS37725LambdaDominant465GStdev)*g,
	uncertainty LambdaDominant465R == Gaussian(LambdaDominant465B, kTCS37725LambdaDominant465RStdev)*g,
	uncertainty LambdaDominant465C == Gaussian(LambdaDominant465C, kTCS37725LambdaDominant465CStdev)*g,
	
	uncertainty LambdaDominant525B == Gaussian(LambdaDominant525B, kTCS37725LambdaDominant525BStdev)*g,
	uncertainty LambdaDominant525G == Gaussian(LambdaDominant525G, kTCS37725LambdaDominant525GStdev)*g,
	uncertainty LambdaDominant525R == Gaussian(LambdaDominant525B, kTCS37725LambdaDominant525RStdev)*g,
	uncertainty LambdaDominant525C == Gaussian(LambdaDominant525C, kTCS37725LambdaDominant525CStdev)*g,
	
	uncertainty LambdaDominant615B == Gaussian(LambdaDominant615B, kTCS37725LambdaDominant615BStdev)*g,
	uncertainty LambdaDominant615G == Gaussian(LambdaDominant615G, kTCS37725LambdaDominant615GStdev)*g,
	uncertainty LambdaDominant615R == Gaussian(LambdaDominant615B, kTCS37725LambdaDominant615RStdev)*g,
	uncertainty LambdaDominant615C == Gaussian(LambdaDominant615C, kTCS37725LambdaDominant615CStdev)*g,

	#
	#	When this token is returned by the sensor, it denotes invalid sensed value / erasure in communication with sensor.
	#
	erasuretoken LambdaDominant465B == kTCS37725LambdaDominant465BErasureToken,
	erasuretoken LambdaDominant465G == kTCS37725LambdaDominant465GErasureToken,
	erasuretoken LambdaDominant465R == kTCS37725LambdaDominant465RErasureToken,
	erasuretoken LambdaDominant465C == kTCS37725LambdaDominant465CErasureToken,
	
	erasuretoken LambdaDominant525B == kTCS37725LambdaDominant525BErasureToken,
	erasuretoken LambdaDominant525G == kTCS37725LambdaDominant525GErasureToken,
	erasuretoken LambdaDominant525R == kTCS37725LambdaDominant525RErasureToken,
	erasuretoken LambdaDominant525C == kTCS37725LambdaDominant525CErasureToken,
	
	erasuretoken LambdaDominant615B == kTCS37725LambdaDominant615BErasureToken,
	erasuretoken LambdaDominant615G == kTCS37725LambdaDominant615GErasureToken,
	erasuretoken LambdaDominant615R == kTCS37725LambdaDominant615RErasureToken,
	erasuretoken LambdaDominant615C == kTCS37725LambdaDominant615CErasureToken,

	#
	#	Precision settings list for the sensor. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Cost has a unit of microwatts.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision LambdaDominant465B == {
					(16*bits, -1),
				},

	precision LambdaDominant465G == {
					(16*bits, -1),
				},

	precision LambdaDominant465R == {
					(16*bits, -1),
				},

	precision LambdaDominant465C == {
					(16*bits, -1),
				},

	precision LambdaDominant525B == {
					(16*bits, -1),
				},

	precision LambdaDominant525G == {
					(16*bits, -1),
				},

	precision LambdaDominant525R == {
					(16*bits, -1),
				},

	precision LambdaDominant525C == {
					(16*bits, -1),
				},

	precision LambdaDominant615B == {
					(16*bits, -1),
				},

	precision LambdaDominant615G == {
					(16*bits, -1),
				},

	precision LambdaDominant615R == {
					(16*bits, -1),
				},

	precision LambdaDominant615C == {
					(16*bits, -1),
				},

	#
	#	Accuracy settings list for the sensor. This is a list of (accuracy, cost) pairs.
	#
	#	Noise values are used here for accuracy.
	#
	#	Noise values of light sensor cannot be found.
	#
	accuracy LambdaDominant465B == {
					(-1, -1),
				},

	accuracy LambdaDominant465G == {
					(-1, -1),
				},

	accuracy LambdaDominant465R == {
					(-1, -1),
				},

	accuracy LambdaDominant465C == {
					(-1, -1),
				},

	accuracy LambdaDominant525B == {
					(-1, -1),
				},

	accuracy LambdaDominant525G == {
					(-1, -1),
				},

	accuracy LambdaDominant525R == {
					(-1, -1),
				},

	accuracy LambdaDominant525C == {
					(-1, -1),
				},

	accuracy LambdaDominant615B == {
					(-1, -1),
				},

	accuracy LambdaDominant615G == {
					(-1, -1),
				},

	accuracy LambdaDominant615R == {
					(-1, -1),
				},

	accuracy LambdaDominant615C == {
					(-1, -1),
				}
}
