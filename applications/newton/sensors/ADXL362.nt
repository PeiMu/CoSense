#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*		Redistributions of source code must retain the above
#			copyright notice, this list of conditions and the following
#			disclaimer.
#
#	*		Redistributions in binary form must reproduce the above
#			copyright notice, this list of conditions and the following
#			disclaimer in the documentation and/or other materials
#			provided with the distribution.
#
#	*		Neither the name of the author nor the names of its
#			contributors may be used to endorse or promote products
#			derived from this software without specific prior written
#			permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#

include "NewtonBaseSignals.nt"

#
#	Description: Additional signal used in this particular newton description.
#

noise : signal =
{
	name = "micro g per square root of Hertz" English;
	symbol = "n";
	derivation = (10 ** -6) * acceleration / (frequency ** 0.5);
}

#
#	Newton Description for the sensor ADXL362 starts here.
#
#	Figures quoted here are referenced from Analog Devices ADXL362 Accelerometer data sheet revision B.
#
#	The constant is a value which can never be generated by the sensor. We use that to denote “impossible” or “invalid” readings.
#

kADXL362xAccelerationErasureToken: const = 16rFEFE;
kADXL362yAccelerationErasureToken: const = 16rFEFE;
kADXL362zAccelerationErasureToken: const = 16rFEFE;
kADXL362TemperatureErasureToken: const = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kADXL362xAccelerationStdev: const = ;
kADXL362yAccelerationStdev: const = ;
kADXL362zAccelerationStdev: const = ;

#
#	Standard Deviation of the temperature sensor can be found in Table 1 of Specifications on page 4.
#
kADXL362TemperatureStdev: const = 0.0025*k;

ADXL362: sensor (
			xAccel: acceleration@0,
			yAccel: acceleration@1,
			zAccel: acceleration@2,
			Temp: temperature
		)

{
	#
	#	The full range of the sensor
	#
	#	Range of Acceleration can be found in Table 1 of Specifications on page 4.
	#

	range xAcceleration == [-8*mj .. 8*mj],
	range yAcceleration == [-8*mj .. 8*mj],
	range zAcceleration == [-8*mj .. 8*mj],

	#
	#	Range of Temperature can be found in Ordering Guide on page 43.
	#
	range Temperature == [233.15*K .. 358.15*K],

	#
	#	The operation sequence needed to get a sample
	#
	#	Register address of Accelerometer can be found in Table 11 of register map on page 23.
	#
	interface xAcceleration@8*bits == "spi" ()
	{

		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get xAccel data...
		#
		xAcceleration@8*bits = read 16r08;
	},
	
	interface xAcceleration@12*bits == "spi" ()
	{

		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of xAccel data...
		#

		XDATA_H = read 16r0F;
		XDATA_L = read 16r0E;
		xAcceleration@12*bits = (XDATA_H << 8) | (XDATA_L);
	},

	interface yAcceleration@8*bits == "spi" ()
	{

		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get yAccel data...
		#
		yAcceleration@8*bits = read 16r09;
	},

	interface yAcceleration@12*bits == "spi" ()
	{

		#
		#		Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#		Get MSB and LSB of yAccel data...
		#
		YDATA_H = read 16r11;
		YDATA_L = read 16r10;
		yAcceleration@12*bits = (YDATA_H << 8) | (YDATA_L);
	},

	interface zAcceleration@8*bits == "spi" ()
	{

		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get zAccel data...
		#
		zAcceleration@8*bits = read 16r0A;
	},

	interface zAcceleration@12*bits == "spi" ()
	{

		#
		#		Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#		Get MSB and LSB of zAccel data...
		#
		ZDATA_H = read 16r13;
		ZDATA_L = read 16r12;
		zAcceleration@12*bits = (ZDATA_H << 8) | (ZDATA_L);
	},

	#
	#		Register address of temperature sensor can be found in Table 11 of register map on page 23.
	#
	interface Temperature == "spi" ()
	{

		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Temp data...
		#
		TEMP_H = read 16r15;
		TEMP_L = read 16r14;
		Temperature = (TEMP_H << 8) | (TEMP_L);
	},

	#
	#	Uncertainty/noise model of the sensor as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty xAcceleration == Gaussian(xAcceleration, kADXL362xAccelerationStdev)*g,
	uncertainty yAcceleration == Gaussian(yAcceleration, kADXL362yAccelerationStdev)*g,
	uncertainty zAcceleration == Gaussian(zAcceleration, kADXL362zAccelerationStdev)*g,

	uncertainty Temperature == Gaussian(Temperature, kADXL362TemperatureStdev)*g,

	#
	#		When this token is returned by the sensor, it denotes invalid sensed value / erasure in communication with sensor.
	#

	erasuretoken xAcceleration == kADXL362xAccelerationErasureToken,
	erasuretoken yAcceleration == kADXL362yAccelerationErasureToken,
	erasuretoken zAcceleration == kADXL362zAccelerationErasureToken,
	erasuretoken Temperature == kADXL362TemperatureErasureToken,

	#
	#	Precision settings list for the sensor. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#

	precision xAcceleration == {
					(8*bits, 0),
					(12*bits, 0),
				},

	precision yAcceleration == {
					(8*bits, 0),
					(12*bits, 0),
				},

	precision zAcceleration == {
					(8*bits, 0),
					(12*bits, 0),
				},

	precision Temperature == {
					(12*bits, 0),
				},

	#
	#	Accuracy settings list for the sensor. This is a list of (accuracy, cost) pairs.
	#
	#	Noise and offset values are used here for accuracy.
	#
	#	Could not find the relevant information in data sheet so I left some of the cost as 0.
	#
	#	Cost has a unit of microwatts.
	#
	#	Power for xAcceleration and yAcceleration could be found on page 14.
	#
	#	Noise values of Accelerometer can be found in Table 1 of Specifications on page 4.
	#
	accuracy xAcceleration == {
					(550*n, 3.6),
					(400*n, 6.6)
					(380*n, 8.91),
					(280*n, 14.85),
					(250*n, 26),
					(175*n, 49.5),
				},

	accuracy yAcceleration == {
					(550*n, 3.6),
					(400*n, 6.6)
					(380*n, 8.91),
					(280*n, 14.85),
					(250*n, 26),
					(175*n, 49.5),
				},

	accuracy zAcceleration == {
					(920*n, 0),
					(550*n, 3.6)
					(350*n, 0),
					(250*n, 26),
				},

	#
	#		Offset value of Temperature Sensor can be found in Table 2 of document 1.2 on page 12.
	#
	#		Could not find the relevant information in data sheet so I left the cost as 0.
	#
	accuracy Temperature == {
					(4*K, 0),
				}
}
