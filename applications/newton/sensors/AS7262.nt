#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#
include "NewtonBaseSignals.nt"

#
#	Description: Additional signals used in this particular newton description.
#
irradianceResponsivity : signal =
{
	name = "counts per micro watts per square centimetres" English;
	symbol = c;
	derivation = (10 ** 10) / (power * area);
}

samplebits : signal =
{
	name = "bits per sample" English;
	symbol = b;
	derivation = none;
}

#
#	Newton Description for the device AS7262 starts here.
#
#	Figures quoted here are referenced from AMS AS7262 Device data sheet (Mar 2017).
#
#	The constant is a value which can never be generated by the device. We use that to denote “impossible” or “invalid” readings.
#
kAS7262TemperatureErasureToken: constant = 16rFEFE;
kAS7262Lambda450VErasureToken: constant = 16rFEFE;
kAS7262Lambda500BErasureToken: constant = 16rFEFE;
kAS7262Lambda550GErasureToken: constant = 16rFEFE;
kAS7262Lambda570YErasureToken: constant = 16rFEFE;
kAS7262Lambda600OErasureToken: constant = 16rFEFE;
kAS7262Lambda650RErasureToken: constant = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kAS7262TemperatureStdev: constant = -1;
kAS7262Lambda450VStdev: constant = -1;
kAS7262Lambda500BStdev: constant = -1;
kAS7262Lambda550GStdev: constant = -1;
kAS7262Lambda570YStdev: constant = -1;
kAS7262Lambda600OStdev: constant = -1;
kAS7262Lambda650RStdev: constant = -1;

AS7262: sensor (
			as7262Temperature: temperature,
			as7262Lambda450V: irradianceResponsivity[0],
			as7262Lambda500B: irradianceResponsivity[1],
			as7262Lambda550G: irradianceResponsivity[2],
			as7262Lambda570Y: irradianceResponsivity[3],
			as7262Lambda600O: irradianceResponsivity[4],
			as7262Lambda650R: irradianceResponsivity[5]
			) =
{

	#
	#	The full range of the device
	#
	#	Range of Temperature can be found in Figure 6 of Electrical Characteristics on page 6.
	#
	range as7262Temperature == [233.15 K, 358.15 K],
	
	#
	#	Range of irradiance can be found in Figure 12 of Optical Characteristics on page 11.
	#
	range as7262Lambda450V == [0 c, 45 c],
	range as7262Lambda500B == [0 c, 45 c],
	range as7262Lambda550G == [0 c, 45 c],
	range as7262Lambda570Y == [0 c, 45 c],
	range as7262Lambda600O == [0 c, 45 c],
	range as7262Lambda650R == [0 c, 45 c],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of device can be found in Figure 18 of I2C Feature List on page 18.
	#
	#	Register address of temperature sensor can be found in Figure 20 of I2C Virtual Register Set on page 22.
	#
	interface as7262Temperature == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get Temp data...
		#
		xxxas7262Temperature = read 16r06;
	},
	
	interface as7262Temperature == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get Temp data...
		#
		xxxas7262Temperature = read 16r06;
	},
	
	#
	#	Register address of channel data can be found in Figure 20 of I2C Virtual Register Set on page 22.
	#
	interface as7262Lambda450V[16]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda450V data...
		#
		V_High = read 16r08;
		V_Low = read 16r09;
		#as7262Lambda450V = (V_High << 8) | (V_Low);
	},

	interface as7262Lambda450V[16]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda450V data...
		#
		V_High = read 16r08;
		V_Low = read 16r09;
		#as7262Lambda450V = (V_High << 8) | (V_Low);
	},

	interface as7262Lambda450V[32]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda450V data...
		#
		V_Cal_High = read 16r14;
		V_Cal_Xhigh = read 16r15;
		V_Cal_Low = read 16r16;
		V_Cal_Xlow = read 16r17;
		#as7262Lambda450V = (V_Cal_High << 24) |(V_Cal_Xhigh << 16) |(V_Cal_Low << 8) | (V_Cal_Xlow);
	},

	interface as7262Lambda450V[32]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda450V data...
		#
		V_Cal_High = read 16r14;
		V_Cal_Xhigh = read 16r15;
		V_Cal_Low = read 16r16;
		V_Cal_Xlow = read 16r17;
		#as7262Lambda450V = (V_Cal_High << 24) |(V_Cal_Xhigh << 16) |(V_Cal_Low << 8) | (V_Cal_Xlow);
	},
	
	interface as7262Lambda500B[16]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda500B data...
		#
		B_High = read 16r0A;
		B_Low = read 16r0B;
		#as7262Lambda500B = (B_High << 8) | (B_Low);
	},

	interface as7262Lambda500B[16]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda500B data...
		#
		B_High = read 16r0A;
		B_Low = read 16r0B;
		#as7262Lambda500B = (B_High << 8) | (B_Low);
	},

	interface as7262Lambda500B[32]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda500B data...
		#
		B_Cal_High = read 16r18;
		B_Cal_Xhigh = read 16r19;
		B_Cal_Low = read 16r1A;
		B_Cal_Xlow = read 16r1B;
		#as7262Lambda500B = (B_Cal_High << 24) |(B_Cal_Xhigh << 16) |(B_Cal_Low << 8) | (B_Cal_Xlow);
	},

	interface as7262Lambda500B[32]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda500B data...
		#
		B_Cal_High = read 16r18;
		B_Cal_Xhigh = read 16r19;
		B_Cal_Low = read 16r1A;
		B_Cal_Xlow = read 16r1B;
		#as7262Lambda500B = (B_Cal_High << 24) |(B_Cal_Xhigh << 16) |(B_Cal_Low << 8) | (B_Cal_Xlow);
	},

	interface as7262Lambda550G[16]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda550G data...
		#
		G_High = read 16r0C;
		G_Low = read 16r0D;
		#as7262Lambda550G = (G_High << 8) | (G_Low);
	},
	
	interface as7262Lambda550G[16]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda550G data...
		#
		G_High = read 16r0C;
		G_Low = read 16r0D;
		#as7262Lambda550G = (G_High << 8) | (G_Low);
	},
	
	interface as7262Lambda550G[32]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda550G data...
		#
		G_Cal_High = read 16r1C;
		G_Cal_Xhigh = read 16r1D;
		G_Cal_Low = read 16r1E;
		G_Cal_Xlow = read 16r1F;
		#as7262Lambda550G = (G_Cal_High << 24) |(G_Cal_Xhigh << 16) |(G_Cal_Low << 8) | (G_Cal_Xlow);
	},

	interface as7262Lambda550G[32]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda550G data...
		#
		G_Cal_High = read 16r1C;
		G_Cal_Xhigh = read 16r1D;
		G_Cal_Low = read 16r1E;
		G_Cal_Xlow = read 16r1F;
		#as7262Lambda550G = (G_Cal_High << 24) |(G_Cal_Xhigh << 16) |(G_Cal_Low << 8) | (G_Cal_Xlow);
	},

	interface as7262Lambda570Y[16]*bits == i2c (address: 16r49)
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda570Y data...
		#
		Y_High = read 16r0E;
		Y_Low = read 16r0F;
		#as7262Lambda570Y = (Y_High << 8) | (Y_Low);
	},
	
	interface as7262Lambda570Y[16]*bits == spi
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda570Y data...
		#
		Y_High = read 16r0E;
		Y_Low = read 16r0F;
		#as7262Lambda570Y = (Y_High << 8) | (Y_Low);
	},
	
	interface as7262Lambda570Y[32]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda570Y data...
		#
		Y_Cal_High = read 16r20;
		Y_Cal_Xhigh = read 16r21;
		Y_Cal_Low = read 16r22;
		Y_Cal_Xlow = read 16r23;
		#as7262Lambda570Y = (Y_Cal_High << 24) |(Y_Cal_Xhigh << 16) |(Y_Cal_Low << 8) | (Y_Cal_Xlow);
	},

	interface as7262Lambda570Y[32]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda570Y data...
		#
		Y_Cal_High = read 16r20;
		Y_Cal_Xhigh = read 16r21;
		Y_Cal_Low = read 16r22;
		Y_Cal_Xlow = read 16r23;
		#as7262Lambda570Y = (Y_Cal_High << 24) |(Y_Cal_Xhigh << 16) |(Y_Cal_Low << 8) | (Y_Cal_Xlow);
	},

	interface as7262Lambda600O[16]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda600O data...
		#
		O_High = read 16r10;
		O_Low = read 16r11;
		#as7262Lambda600O = (O_High << 8) | (O_Low);
	},
	
	interface as7262Lambda600O[16]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda600O data...
		#
		O_High = read 16r10;
		O_Low = read 16r11;
		#as7262Lambda600O = (O_High << 8) | (O_Low);
	},

	interface as7262Lambda600O[32]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda600O data...
		#
		O_Cal_High = read 16r24;
		O_Cal_Xhigh = read 16r25;
		O_Cal_Low = read 16r26;
		O_Cal_Xlow = read 16r27;
		#as7262Lambda600O = (O_Cal_High << 24) |(O_Cal_Xhigh << 16) |(O_Cal_Low << 8) | (O_Cal_Xlow);
	},

	interface as7262Lambda600O[32]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda600O data...
		#
		O_Cal_High = read 16r24;
		O_Cal_Xhigh = read 16r25;
		O_Cal_Low = read 16r26;
		O_Cal_Xlow = read 16r27;
		#as7262Lambda600O = (O_Cal_High << 24) |(O_Cal_Xhigh << 16) |(O_Cal_Low << 8) | (O_Cal_Xlow);
	},

	interface as7262Lambda650R[16]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda650R data...
		#
		R_High = read 16r12;
		R_Low = read 16r13;
		#as7262Lambda650R = (R_High << 8) | (R_Low);
	},
	
	interface as7262Lambda650R[16]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of Lambda650R data...
		#
		R_High = read 16r12;
		R_Low = read 16r13;
		#as7262Lambda650R = (R_High << 8) | (R_Low);
	},

	interface as7262Lambda650R[32]*bits == i2c (address: 16r49)
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda650R data...
		#
		R_Cal_High = read 16r28;
		R_Cal_Xhigh = read 16r29;
		R_Cal_Low = read 16r2A;
		R_Cal_Xlow = read 16r2B;
		#as7262Lambda650R = (R_Cal_High << 24) |(R_Cal_Xhigh << 16) |(R_Cal_Low << 8) | (R_Cal_Xlow);
	},

	interface as7262Lambda600O[32]*bits == spi
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get 4 bytes of Lambda650R data...
		#
		R_Cal_High = read 16r28;
		R_Cal_Xhigh = read 16r29;
		R_Cal_Low = read 16r2A;
		R_Cal_Xlow = read 16r2B;
		#as7262Lambda650R = (R_Cal_High << 24) |(R_Cal_Xhigh << 16) |(R_Cal_Low << 8) | (R_Cal_Xlow);
	},

	#
	#	Uncertainty/noise model of the device as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	#uncertainty as7262Temperature == Gaussian(as7262Temperature, kAS7262TemperatureStdev)*g,
	#uncertainty as7262Lambda450V == Gaussian(as7262Lambda450V, kAS7262Lambda450VStdev)*g,
	#uncertainty as7262Lambda500B == Gaussian(as7262Lambda500B, kAS7262Lambda500BStdev)*g,
	#uncertainty as7262Lambda550G == Gaussian(as7262Lambda450V, kAS7262Lambda550GStdev)*g,
	#uncertainty as7262Lambda570Y == Gaussian(as7262Lambda570Y, kAS7262Lambda570YStdev)*g,
	#uncertainty as7262Lambda600O == Gaussian(as7262Lambda600O, kAS7262Lambda600OStdev)*g,
	#uncertainty as7262Lambda650R == Gaussian(as7262Lambda650R, kAS7262Lambda650RStdev)*g,

	#
	#	When this token is returned by the device, it denotes invalid sensed value / erasure in communication with device.
	#
	#erasuretoken as7262Temperature == kAS7262TemperatureErasureToken,
	#erasuretoken as7262Lambda450V == kAS7262Lambda450VErasureToken,
	#erasuretoken as7262Lambda500B == kAS7262Lambda500BErasureToken,
	#erasuretoken as7262Lambda550G == kAS7262Lambda550GErasureToken,
	#erasuretoken as7262Lambda570Y == kAS7262Lambda570YErasureToken,
	#erasuretoken as7262Lambda600O == kAS7262Lambda600OErasureToken,
	#erasuretoken as7262Lambda650R == kAS7262Lambda650RErasureToken,

	#
	#	Precision settings list for the device. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Cost has a unit of microwatts.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision as7262Temperature == {
					(8 b, -1)
				},

	precision as7262Lambda450V == {
					(16 b, -1),
					(32 b, -1)
				},

	precision as7262Lambda500B == {
					(16 b, -1),
					(32 b, -1)
				},

	precision as7262Lambda550G == {
					(16 b, -1),
					(32 b, -1)
				},

	precision as7262Lambda570Y == {
					(16 b, -1),
					(32 b, -1)
				},

	precision as7262Lambda600O == {
					(16 b, -1),
					(32 b, -1)
				},

	precision as7262Lambda650R == {
					(16 b, -1),
					(32 b, -1)
				},

	#
	#	Accuracy settings list for the device. This is a list of (accuracy, cost) pairs.
	#
	#	Accuracy values of device cannot be found.
	#
	accuracy as7262Temperature == {
					(-1, -1)
				},

	accuracy as7262Lambda450V == {
					(-1, -1)
				},

	accuracy as7262Lambda500B == {
					(-1, -1)
				},

	accuracy as7262Lambda550G == {
					(-1, -1)
				},

	accuracy as7262Lambda570Y == {
					(-1, -1)
				},

	accuracy as7262Lambda600O == {
					(-1, -1)
				},

	accuracy as7262Lambda650R == {
					(-1, -1)
				}
}
