#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#
include "NewtonBaseSignals.nt"

#
#	Description: Additional signal used in this particular newton description.
#
rateNoiseDensity : signal =
{
	name = "degree per second per square root of Hertz" English;
	symbol = "Rn";
	derivation = angularRate / (frequency ** 0.5);
}

#
#	Newton Description for the sensor L3GD20H starts here.
#
#	Figures quoted here are referenced from ST L3GD20H MEMS motion sensor data sheet revision 2.
#
#	The constant is a value which can never be generated by the sensor. We use that to denote “impossible” or “invalid” readings.
#
kL3GD20HxAngularRateErasureToken: const = 16rFEFE;
kL3GD20HyAngularRateErasureToken: const = 16rFEFE;
kL3GD20HzAngularRateErasureToken: const = 16rFEFE;
kL3GD20HTemperatureErasureToken: const = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kL3GD20HxAngularRateStdev: const = ;
kL3GD20HyAngularRateStdev: const = ;
kL3GD20HzAngularRateStdev: const = ;
kL3GD20HTemperatureStdev: const = ;

L3GD20H: sensor (
			xAngularRate: angularRate@0,
			yAngularRate: angularRate@1,
			zAngularRate: angularRate@2,
			Temp: temperature
		)
{
	#
	#	The full range of the sensor
	#
	#	Range of Angular Rate can be found in Table 3 of document 2.1 on page 10.
	#
	range xAngularRate == [-2000*aj .. 2000*aj],
	range yAngularRate == [-2000*aj .. 2000*aj],
	range zAngularRate == [-2000*aj .. 2000*aj],

	#
	#	Range of Temperature can be found in Table 3 of document 2.1 on page 10.
	#
	range Temperature == [233.15*K .. 358.15*K],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of Gyroscope can be found in Table 12 of document 5.1.1 on page 28.
	#
	#	Register address of Gyroscope can be found in Table 17 of document 6 on page 34.
	#
	interface xAngularRate == "i2c" (address: "0xD5")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of xAngularRate data...
		#
		OUT_X_H = read 16r29;
		OUT_X_L = read 16r28;
		xAngularRate = (OUT_X_H <<8) | (OUT_X_L);
	},

	interface xAngularRate == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of xAngularRate data...
		#
		OUT_X_H = read 16r29;
		OUT_X_L = read 16r28;
		xAngularRate = (OUT_X_H <<8) | (OUT_X_L);
	},

	interface yAngularRate == "i2c" (address: "0xD5")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of yAngularRate data...	
		#
		OUT_Y_H = read 16r2B;
		OUT_Y_L = read 16r2A;
		yAngularRate = (OUT_Y_H <<8) | (OUT_Y_L);
	},

	interface yAngularRate == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of yAngularRate data...	
		#
		OUT_Y_H = read 16r2B;
		OUT_Y_L = read 16r2A;
		yAngularRate = (OUT_Y_H <<8) | (OUT_Y_L);
	},

	interface zAngularRate == "i2c" (address: "0xD5")
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of zAngularRate data...
		#
		OUT_Z_H = read 16r2D;
		OUT_Z_L = read 16r2C;
		zAngularRate = (OUT_Z_H <<8) | (OUT_Z_L);
	},

	interface zAngularRate == "spi" ()
	{
		#
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#
		#	Get MSB and LSB of zAngularRate data...
		#
		OUT_Z_H = read 16r2D;
		OUT_Z_L = read 16r2C;
		zAngularRate = (OUT_Z_H <<8) | (OUT_Z_L);
	},

	#
	#	Temperature sensor is part of the accelerometer so i2c address of Temperature Sensor is also 0xD5.
	#
	#	Register address of temperature sensor can be found in Table 17 of document 6 on page 34.
	#
	interface Temperature == "i2c" (address: "0xD5")
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#	
		#	Get Temp data...
		#
		Temperature = read 16r26;
	},

	interface Temperature == "spi" ()
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#	
		#	Get Temp data...
		#
		Temperature = read 16r26;
	},

	#
	#	Uncertainty/noise model of the sensor as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty xAngularRate == Gaussian(xAngularRate, kL3GD20HxAngularRateStdev)*g,
	uncertainty yAngularRate == Gaussian(yAngularRate, kL3GD20HyAngularRateStdev)*g,
	uncertainty zAngularRate == Gaussian(zAngularRate, kL3GD20HzAngularRateStdev)*g,
	uncertainty Temperature == Gaussian(Temperature, kL3GD20HTemperatureStdev)*g,

	#
	#	When this token is returned by the sensor, it denotes invalid sensed value / erasure in communication with sensor.
	#
	erasuretoken xAngularRate == kL3GD20HxAngularRateErasureToken,
	erasuretoken yAngularRate == kL3GD20HyAngularRateErasureToken,
	erasuretoken zAngularRate == kL3GD20HzAngularRateErasureToken,
	erasuretoken Temperature == kL3GD20HTemperatureErasureToken,

	#
	#	Precision settings list for the sensor. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Cost has a unit of microwatts.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision xAngularRate == {
					(16*bits, nil),
				},

	precision yAngularRate == {
					(16*bits, nil),
				},

	precision zAngularRate == {
					(16*bits, nil),
				},

	precision Temperature == {
					(8*bits, nil),
				},

	#
	#	Accuracy settings list for the sensor. This is a list of (accuracy, cost) pairs.
	#
	#	Noise values are used here for accuracy.
	#
	#	Noise values of Gyroscope can be found in Table 3 of document 2.1 on page 10.
	#
	#	Product of the total supply current and supply voltage in normal mode is used as the cost value.
	#
	#	Supply voltage is 3 V which is stated in page 10.
	#
	#	Current value (normal mode) of Gyroscope can be found in Table 4 of document 2.2 on page 11.
	#
	accuracy xAngularRate == {
					(0.011*Rn, 15000),
				},

	accuracy xAngularRate == {
					(0.011*Rn, 15000),
				},

	accuracy xAngularRate == {
					(0.011*Rn, 15000)
				},

	#
	#	Could not find the relevant information for accuracy in data sheet so I left it as 0.
	#
	#	Product of the total supply current and supply voltage in normal mode is used as the cost value.
	#
	#	Current values (normal mode) of Temperature Sensor can be found in Table 4 of document 2.2 on page 11.
	#
	accuracy Temperature == {
					(nil, 15000),
				}
}
