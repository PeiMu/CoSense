#
#	Authored 2018, Rae Zhao.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Base signals used in most Newton descriptions.
#

include "NewtonBaseSignals.nt"

#
#	Newton Description for the sensor TMP006B starts here.
#
#	Figures quoted here are referenced from Texas Instruments TMP006B Sensor data sheet revised November 2014.
#
#	The constant is a value which can never be generated by the sensor. We use that to denote “impossible” or “invalid” readings.
#
kTMP006BTemperatureErasureToken: const = 16rFEFE;

#
#	Standard Deviation is not available in data sheet.
#
kTMP006BTemperatureStdev: const = unknown;

TMP006B: sensor (tmp006Temperature: temperature)
{
	#
	#	The full range of the sensor
	#
	#	Range of Temperature can be found in document 7.1 on page 5.
	#
	range tmp006Temperature == [218.15*K .. 398.15*K],

	#
	#	The operation sequence needed to get a sample
	#
	#	i2c address of Temperature Sensor can be found in Table 4 of document 8.3.8.1 on page 16.
	#
	#	Register address of temperature sensor can be found in Table 6 of document 8.5 on page 19.
	#
	#	The temperature register has 14 bits which means that there should be 2 register addresses.
	#
	interface tmp006Temperature == i2c (address: 16r40)
	{
		#		
		#	Start up at normal mode, modify (write value register) if set to other modes ...
		#	
		#	Get Temp data...
		#
		tmp006Temperature = read 16r01;
	},

	#
	#	Uncertainty/noise model of the sensor as a function of mean value
	#
	#	Unsure about the function that describes the relationship between the following variables, so leave them as they are.
	#
	uncertainty tmp006Temperature == Gaussian(Temperature, kTMP006BTemperatureStdev)*K,

	#
	#	When this token is returned by the sensor, it denotes invalid sensed value / erasure in communication with sensor.
	#
	erasuretoken tmp006Temperature == kTMP006BTemperatureErasureToken,

	#
	#	Precision settings list for the sensor. This is a list of (precision, cost) pairs.
	#
	#	The cost is a power or latency (or energy=power*time) cost for accessing values.
	#
	#	Cost has a unit of microwatts.
	#
	#	Could not find the relevant information in data sheet so I left the cost as 0.
	#
	precision tmp006Temperature == {
					(14*bits, unknown),
				},

	#
	#	Accuracy settings list for the sensor. This is a list of (accuracy, cost) pairs.
	#
	#	Noise and offset values are used here for accuracy.
	#
	#	Criteria for accuracy of Temperature Sensor can be found in Equation 12 of document 9.2.1.2.2 on page 23.
	#
	accuracy tmp006Temperature == {
					(unknown, unknown),
				}
}
