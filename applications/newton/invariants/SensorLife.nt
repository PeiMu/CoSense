#
#	Authored 2017, Jonathan Lim.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Invariants inspired by the "Sensor Life" example from the Uncertain<T> paper.
#

temperature: signal(i: 0 to 17) = {
	name = "Celsius" English;
	symbol = "C";
	derivation = none;
}

maxTemp: constant = 120 * C;

tempInRange: invariant(
	neighborTempNW: temperature@0,
	neighborTempN: temperature@1,
	neighborTempNE: temperature@2,
	neighborTempE: temperature@3,
	neighborTempW: temperature@4,
	neighborTempSW: temperature@5,
	neighborTempS: temperature@6,
	neighborTempSE: temperature@7,
	selfTemp: temperature@8
) = {
	neighborTempNW < maxTemp,
	neighborTempN < maxTemp,
	neighborTempNE < maxTemp,
	neighborTempE < maxTemp,
	neighborTempW < maxTemp,
	neighborTempSW < maxTemp,
	neighborTempS < maxTemp,
	neighborTempSE < maxTemp,
	selfTemp < maxTemp
}

temperatureRedundancy: invariant(
	neighborTempNW1: temperature@0,
	neighborTempN1: temperature@1,
	neighborTempNE1: temperature@2,
	neighborTempE1: temperature@3,
	neighborTempW1: temperature@4,
	neighborTempSW1: temperature@5,
	neighborTempS1: temperature@6,
	neighborTempSE1: temperature@7,
	selfTemp1: temperature@8,
	neighborTempNW2: temperature@9,
	neighborTempN2: temperature@10,
	neighborTempNE2: temperature@11,
	neighborTempE2: temperature@12,
	neighborTempW2: temperature@13,
	neighborTempSW2: temperature@14,
	neighborTempS2: temperature@15,
	neighborTempSE2: temperature@16,
	selfTemp2: temperature@17
) = {
	neighborTempNW1 ~ neighborTempNW2,
	neighborTempN1 ~ neighborTempN2,
	neighborTempNE1 ~ neighborTempNE2,
	neighborTempE1 ~ neighborTempE2,
	neighborTempW1 ~ neighborTempW2,
	neighborTempSW1 ~ neighborTempSW2,
	neighborTempS1 ~ neighborTempS2,
	neighborTempSE1 ~ neighborTempSE2,
	selfTemp1 ~ selfTemp2
}
