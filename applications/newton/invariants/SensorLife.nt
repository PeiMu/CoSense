#
#	Authored 2017, Jonathan Lim.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Invariants inspired by the "Sensor Life" example from the Uncertain<T> paper.
#


include "NewtonBaseSignals.nt"

multiDimensionalTemperature: signal(i: 0 to 17) = {
	name = "Celsius" English;
	symbol = celcius;
	derivation = temperature + 273*K;
}

maxTemp: constant = 120 celcius;

tempInRange: invariant(
	neighborTempNW: multiDimensionalTemperature[0],
	neighborTempN: multiDimensionalTemperature[1],
	neighborTempNE: multiDimensionalTemperature[2],
	neighborTempE: multiDimensionalTemperature[3],
	neighborTempW: multiDimensionalTemperature[4],
	neighborTempSW: multiDimensionalTemperature[5],
	neighborTempS: multiDimensionalTemperature[6],
	neighborTempSE: multiDimensionalTemperature[7],
	selfTemp: multiDimensionalTemperature[8]
) = {
	neighborTempNW < maxTemp,
	neighborTempN < maxTemp,
	neighborTempNE < maxTemp,
	neighborTempE < maxTemp,
	neighborTempW < maxTemp,
	neighborTempSW < maxTemp,
	neighborTempS < maxTemp,
	neighborTempSE < maxTemp,
	selfTemp < maxTemp
}

multiDimensionalTemperatureRedundancy: invariant(
	neighborTempNW1: multiDimensionalTemperature[0],
	neighborTempN1: multiDimensionalTemperature[1],
	neighborTempNE1: multiDimensionalTemperature[2],
	neighborTempE1: multiDimensionalTemperature[3],
	neighborTempW1: multiDimensionalTemperature[4],
	neighborTempSW1: multiDimensionalTemperature[5],
	neighborTempS1: multiDimensionalTemperature[6],
	neighborTempSE1: multiDimensionalTemperature[7],
	selfTemp1: multiDimensionalTemperature[8],
	neighborTempNW2: multiDimensionalTemperature[9],
	neighborTempN2: multiDimensionalTemperature[10],
	neighborTempNE2: multiDimensionalTemperature[11],
	neighborTempE2: multiDimensionalTemperature[12],
	neighborTempW2: multiDimensionalTemperature[13],
	neighborTempSW2: multiDimensionalTemperature[14],
	neighborTempS2: multiDimensionalTemperature[15],
	neighborTempSE2: multiDimensionalTemperature[16],
	selfTemp2: multiDimensionalTemperature[17]
) = {
	neighborTempNW1 ~ neighborTempNW2,
	neighborTempN1 ~ neighborTempN2,
	neighborTempNE1 ~ neighborTempNE2,
	neighborTempE1 ~ neighborTempE2,
	neighborTempW1 ~ neighborTempW2,
	neighborTempSW1 ~ neighborTempSW2,
	neighborTempS1 ~ neighborTempS2,
	neighborTempSE1 ~ neighborTempSE2,
	selfTemp1 ~ selfTemp2
}
