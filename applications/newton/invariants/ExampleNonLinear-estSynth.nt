#
#	Authored 2020, Orestis Kaparounakis.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#       Run with:
#       ./newton-linux-EN --estimator-synthesis=filterApi.c --process=process --measurement=measure /<path>/<to>/ExampleNonLinear-estSynth.nt

include "NewtonBaseSignals.nt"

p_distance : signal =
{
    # uncertainty = GaussianDistribution(mean: p_distance, var: 0.01);
    uncertainty = GaussianDistribution(mean: 0, var: 0.01);
    symbol		= p_m;
	derivation	= distance;
}

p_speed : signal =
{
    # uncertainty = GaussianDistribution(mean: p_speed, var: 0.01);
    uncertainty = GaussianDistribution(mean: 0, var: 0.01);
    symbol		= p_jf;
	derivation	= speed;
}

m_area : signal =
{
    # uncertainty = GaussianDistribution(mean: m_area, var: 0.1);
    uncertainty = GaussianDistribution(mean: 0, var: 0.1);
	symbol		= m_sq;
	derivation	= area;
}

###############################
#### Declare process model ####
###############################

process : invariant ( P : p_distance,        # Position
                      V : p_speed,
                      step : time) = 
{ 
    P ~ P/V*step,
    V ~ sin(V) + (cos(V))**2
}

###################################
#### Declare measurement model ####
###################################

measure : invariant ( P : p_distance,
                      V : p_speed,
                      Po : m_area,
                      t : time) = 
{ 
    Po ~ P**2
}
