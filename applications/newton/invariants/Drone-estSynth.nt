#
#	Authored 2020, Orestis Kaparounakis.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#       Run with:
#       ./newton-linux-EN --estimator-synthesis=filterApi.c --process=process --measurement=measure /<path>/<to>/Drone-estSynth.nt

include "NewtonBaseSignals.nt"

multiAxisDistance : signal(i: 0 to 2) =
{
        derivation      = distance@i;
}

multiAxisSpeed : signal(i: 0 to 2) =
{
        derivation      = speed@i;
}

multiAxisAttitudeError : signal(i: 0 to 2) =
{
        derivation      = angle@i;
}

attitudeQuaternion : signal(i: 0 to 3) =
{
        derivation      = angle@i;
}


###############################
#### Declare process model ####
###############################

process : invariant ( P : distance,        # Position
                      V : speed,           # Velocity
                      Q : angle,       # Attitude as quaternion
                      u : force,
                      dt : time) = 
{ 
    P ~ P + 2*V*dt + P,
    V ~ V,
    Q ~ Q
}

###################################
#### Declare measurement model ####
###################################

measure : invariant ( P : multiAxisDistance,         # Position
                      Po : multiAxisDistance,        # Position observed
                      V : multiAxisSpeed,            # Velocity
                      Vo : multiAxisSpeed,           # Velocity observed
                      Q : attitudeQuaternion,        # Attitude as quaternion
                      D : multiAxisAttitudeError,    # Attitude change
                      u : force,
                      t : time) = 
{ 
    Po ~ P,
    Vo ~ V,
    Q ~ Q + D
}
