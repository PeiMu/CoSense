#
#	Authored 2017, Shao-Tuan Chen.
#	Differential models: Authored 2020, Orestis Kaparounakis.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description:	Physical invariant for simple pendulum :
#
#	Necessary variables: 
#
#		m : Mass of the pendulum
#
#		L : Length of the pendulum
#
#		g : Acceleration of gravity 
#
#		T : Period of the simple pendulum
#

include "NewtonBaseSignals.nt"

#
#	Dimensional Matrix:
#
#
#		l  g  m  T
#
#	L	1  1  0  0
#	M	0  0  1  0
#	T	0 -2  0  1
#
#	z = null(A,'r')
#

damptype : signal =
{
	name		= "damptype" English;
	symbol		= dmptyp;
	derivation	= mass / second;
}

pendulum : invariant(L: distance, period: time) =
{
	period  ** 2 ~ (4 * kNewtonUnitfree_pi * kNewtonUnitfree_pi * L / kNewtonUnithave_AccelerationDueToGravity)
}


g : constant = 9.80665 (ajf*jf);
bobmass : constant = 1 kg;

# Ideal pendulum
pendulum_ideaL_process : invariant( theta	: angle,
									dtheta	: angularRate,
									dt		: time,
									L		: distance) =
{
	theta ~ theta + dtheta*dt,
	dtheta ~ dtheta - g/L*sin(theta)*dt
}


# Pendulum with damping factor
pendulum_damped_process : invariant( theta	: angle,
									dtheta	: angularRate,
									dt		: time,
									damp	: damptype,
									L		: distance) =
{
	theta ~ theta + dtheta*dt,
	dtheta ~ dtheta - damp/bobmass*dtheta*dt - g/L*sin(theta)*dt
}


pendulum_measure : invariant( theta	: angle,
							dtheta	: angularRate,
							dt		: time,
							gyro_z	: angularRate ) =
{
	gyro_z ~ dtheta
}

# pendulum_measure_2 : invariant( theta	: angle,
# 								gyro_z	: angularRate,
# 								L		: distance ) =
# {
# 	gyro_z ~ -g/L*sin(theta)
# }

# # sensor fusion -- ieee-esl-2017.pdf equation (10)
# pendulum_measure_2 : invariant( _ ) =
# {
# 	gyro_x ~ dtheta,
# #	acc_y ~ L * derivative dtheta dt + g*sin(theta),
# 	acc_z ~  - g*cos(theta) - L*dtheta**2
# }