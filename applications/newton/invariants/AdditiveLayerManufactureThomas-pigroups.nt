#
#	Authored 2020, Phillip Stanley-Marbell.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#	Description: Newton description based on parameters in the Appendix
#	of the paper
#
#		Meurig Thomas, Gavin J. Baxter, Iain Todd
#		"Normalised model-based processing diagrams for additive layer manufacture of engineering alloys",
#		Acta Materialia 108 (2016) 26e35
#
include "NewtonBaseSignals.nt"

SurfaceAbsorptivity : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use fundamental dimensions.
	#
	derivation = (mass**0)*(distance**0)*(time**0)*(temperature**0);
}

ThermalDiffusivity : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use units via the units
	#	abbreviated symbol.
	#
	derivation = (m**2)*(s**-1);
}

SpecificHeatCapacity : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use units via the units
	#	abbreviated symbol.
	#
	derivation = J*(kg**-1)*(K**-1);
}

HatchSpacing : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use units via the units
	#	abbreviated symbol.
	#
	derivation = m;
}

AlphaTitaniumLathWidth : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use fundamental dimensions.
	#
	derivation = distance;
}

LatentHeatOfMelting : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use units via the units
	#	abbreviated symbol.
	#
	derivation = J/kg;
}

ThermalConductivity : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use units via the units
	#	abbreviated symbol.
	#
	derivation = W*(m**-1)*(K**-1);
}

BeamPower : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use units via the units
	#	abbreviated symbol.
	#
	derivation = W;
}

BeamRadius : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use fundamental dimensions.
	#
	derivation = distance;
}

MeltingTemperature : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use units via the units
	#	abbreviated symbol.
	#
	derivation = K;
}

PowderBedTemperature : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use units via the units
	#	abbreviated symbol.
	#
	derivation = K;
}

BeamSpeed : signal =
{
	#
	#	We can express derivation in terms of either
	#	fundamental dimensions or in terms of units.
	#	In this case, we use units via the derived
	#	signal (speed).
	#
	derivation = speed;
}


#
#	For a few of the parameters below (e.g., density) we did not
#	explicitly define new signals above since there are existing
#	standard definitions (in NewtonBaseSignals.nt).
#
AppendixSystem: invariant(				Ax:		SurfaceAbsorptivity,
							a:		ThermalDiffusivity,
							Cp:		SpecificHeatCapacity,
							h:		HatchSpacing,
							L:		AlphaTitaniumLathWidth,
							Lm:		LatentHeatOfMelting,
							lambda:		ThermalConductivity,
							r:		density,
							q:		BeamPower,
							beamRadius:	BeamRadius,
							Tm:		MeltingTemperature,
							T0:		PowderBedTemperature,
							v:		BeamSpeed)			=
{
}
