#
#	Authored 2020, Orestis Kaparounakis
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description:	Lorenz Attractor
#

include "NewtonBaseSignals.nt"

# Dimensional analysis:
# From the equations of the lorenz attractor we gather that:
# 1. y    ~ x
# 2. rho  ~ z
# 3. y    ~ x*rho
# 4. x*y  ~ beta*z
# One type solution:
# x     -> distance
# y     -> distance
# z     -> dimensionless
# sigma -> *
# rho   -> dimensionless
# beta  -> area

troll : signal =
{
	name		= "trl" English;
	symbol		= trl;
	derivation	= 1 / meter / meter / second;
}
troll1 : constant = 1 Hz;
troll2 : constant = 1 trl;
sigma : constant = 28 Hz;
rho1 : constant = 10;   # Underscore to avoid collision with type
beta : constant =  2.6666666666 area;

lorenz_process_1 : invariant( x	: distance,
							  y	: distance,
                              z : concentration, # concentration is a dimensionless signal
                              dt: time) =
{
    x ~ x + sigma*(y - x)*dt,
    y ~ y + (x*(rho1 - z) - y)*dt*troll1,
    z ~ z + (x*y - beta*z)*dt*troll2
}

# Interesting grammar:
# lorenz_process_2 : invariant( x	: distance,
# 							    y	: distance,
#                               z : distance,
#                               t: time) =
# {
#     derivative x t ~ sigma*(y - x)
#     derivative y t ~ (x*(rho1 - z) - y)
#     derivative z t ~ (x*y - beta*z)
# }

lorenz_measure_1 : invariant( x	: distance,
							  y	: distance,
                              z : concentration,
                              dt: time,
                              xm: distance,
                              ym: distance,
                              zm: concentration) =
{
    xm ~ x,
    ym ~ y,
    zm ~ z
}