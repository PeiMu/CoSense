#
#	Authored 2017, Jonathan Lim.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Invariants for a pedometer.
#

include "NewtonBaseSignals.nt"

multiAxisAcceleration : signal(i: 0 to 5) =
{
	derivation	= acceleration[i];
}

multiAxisAngularVelocity : signal(i: 0 to 5) =
{
	derivation = angularVelocity[i];
}

SamplingTime : constant = 5E-4 s;

maximumAcceleration: invariant(
	x: multiAxisAcceleration[0], 
	y: multiAxisAcceleration[1], 
	z: multiAxisAcceleration[2]
) = {
	x < 9.5 * m / s ** 2,
	x > - 9.5 * m / s ** 2,
	y < 9.5 * m / s ** 2,
	y > - 9.5 * m / s ** 2,
	z < 9.5 * m / s ** 2,
	z > - 9.5 * m / s ** 2
}

accelerationAndGyro : invariant(
	x: multiAxisAcceleration[0], 
	y: multiAxisAcceleration[1], 
	z: multiAxisAcceleration[2], 
	row: multiAxisAngularVelocity[0], 
	pitch: multiAxisAngularVelocity[1], 
	yaw: multiAxisAngularVelocity[2]
) = {
	#
	#	Rectangular integration estimation
	#
	((x * SamplingTime) ** 2 + (y * SamplingTime) ** 2 + (z * SamplingTime) ** 2) / (row ** 2 + pitch ** 2 + yaw ** 2) < (2 * m / rad) ** 2,
	(row ** 2 + pitch ** 2 + yaw ** 2) / ((x * SamplingTime) ** 2 + (y * SamplingTime) ** 2 + (z * SamplingTime) ** 2) > (0.1 * rad / m) ** 2
}

accelerationRedundancy: invariant (
	x1: multiAxisAcceleration[0], 
	y1: multiAxisAcceleration[1], 
	z1: multiAxisAcceleration[2], 
	x2: multiAxisAcceleration[3], 
	y2: multiAxisAcceleration[4], 
	z2: multiAxisAcceleration[5]
) = {
	x1 ~ x2,
	y1 ~ y2,
	z1 ~ z2
}

gyroRedundancy: invariant (
	x1: multiAxisAngularVelocity[0], 
	y1: multiAxisAngularVelocity[1], 
	z1: multiAxisAngularVelocity[2], 
	x2: multiAxisAngularVelocity[3], 
	y2: multiAxisAngularVelocity[4], 
	z2: multiAxisAngularVelocity[5]
) = {
	x1 ~ x2,
	y1 ~ y2,
	z1 ~ z2
}
