include "fibonacci.nd"

Fibonacci : function (input: valueType) -> (output: valueType) =
{
	#
	#	Because a function can be invoked by the function or
	#	channel interface, a function implementation that
	#	accesses the argument and return values in the normal
	#	functional style, if first 'load'ed at runtime, will
	#	use a separate runtime implementation that handles
	#	reading from the channel etc.
	#
	matchseq
	{
		(input == 0) =>
		{
			#return (output:0);
		}

		(input == 1) =>
		{
			#return (output:1);
		}

		true =>
		{
			#return output:(Fibonacci(input - 1) + Fibonacci(input - 2));
		}
	};
}

init : function	(arguments: list of string) -> (results: list of string) =
{
	#
	#	Load an instance of the Fibonacci module with
	#	type parameter int16. The `load` operator thus
	#	provides a means for runtime specialization of
	#	modules.
	#
	fib := load Fibonacci(int16) (path Fibonacci);

	#
	#	The list of string aguments is the program name
	#	followed by its arguments as strings.
	#
	return (results:(string Fibonacci(int16 (head tail arguments)))::nil);
}
