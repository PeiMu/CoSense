#
#	For kMathPi and cos (we need both the function prototype as well as the probdef prototype)
#
include "math.nd"

#
#	The module definition gives its signature for other
#	modules (e.g., the runtime system) that want to execute
#	it.
#
#	The module definition need not export the function init
#	if it is not intended to by loaded by the "conventional loader"
#	(e.g., the OS shell).
#
DctIV : module (indexType: type, sampleType: type)
{
	dctIV	: function (N: indexType, x: sampleType) -> (X: sampleType);
	dctIV	: probdef (N: indexType, x: sampleType) -> (X: sampleType);
}



#
#	The probdef is transliterated from dct-iv.cpd
#
#	See R. Jongerius and P. Stanley-Marbell
#	"Language Definition for a Notation of Computational Problems",
#	IBM Research Report rz 3828, IBM Research, 2012.
#
#	DCT IV
#
dctIV	: probdef (N: indexType, x: array [N] of sampleType) -> (X: array [N] of sampleType) =>
{
	#
	#	The outer 'given (X...)' is not needed since N, x, and X are already
	#	bound to the read / write types of the function
	#
	given (X in sampleType)
	(
		forall (k in indexType)
		(
			X[k] == sum n in indexType from 0 to N-1 of ((x[n] * cos((kMathPi / N) * (n + 0.5) * (k + 0.5))))
		)
	)
}
