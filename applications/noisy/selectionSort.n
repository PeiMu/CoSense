include "sortList-variantA.nd"

SelectionSort : module(valueType: type)
{
	init	: function (args: list of string) -> (results: list of string);

	sorter	: function (inputList: list of valueType) -> (outputList: list of valueType);
	sorter	: probdef (inputList: list of valueType) -> (outputList: list of valueType);
}

init : function (args: list of string) -> (results: list of string) =
{
	return (results: sorter(tail args));
}

sorter : function (inputList: list of valueType) -> (outputList: list of valueType) =
{
	#
	#	Pre-conditions: The init function is created, and a valid	
	#		list-of-string input is written to it.
	#
	#	Post-conditions: The reader of the init function reads a
	#		list of string whose head is the largest item,
	#		and the items are in non-increasing order from
	#		head to tail, lexicographically.
	#
	rest, result		: list of string;
	smallest		: string;

	sequence (rest = inputList; length rest > 0;)
	{
		#
		#	Loop invariants: 'result' list contains no items
		#		larger (lexicographically) than 'rest' list.
		#
		#	Progress: in each iteration, an item is removed
		#		from 'rest'
		#
		#	Termination: when 'rest' is empty.
		#
		;
		(smallest, rest) = findSmallest(stringList: rest);
		result = smallest :: result;
	}
	
	return (outputList: result);
}

findSmallest : function (stringList: list of string) -> (result: (string, list of string)) =
{
	#
	#	Pre-conditions: The findSmallest function is created, and a	
	#		valid list-of-string input is written to it.
	#
	#	Post-conditions: The reader of the findSmallest  function
	#		reads a tuple, first item of which is a string, no
	#		larger (lexicographically) than any item on the
	#		incoming list, and the second item in the tuple is a
	#		list of strings being the incoming list with one of
	#		the possible multiple copies of the lexicographically
	#		smallest item removed.
	#
	rest		: list of string;
	input		:= stringList;
	smallest	:= head input;

	sequence (; length input > 0;)
	{
		#
		#	Loop invariant: 'smallest' is the lexicographically
		#		smallest item seen on input thus far, and
		#		is no smaller than any item in 'rest'.
		#
		#	Progress: in each iteration, an item is removed from
		#		'input'.
		#
		#	Termination: when input list is empty.
		#
		item := head input;
		match
		{
			item <= smallest =>
			{
				rest = smallest :: rest;
				smallest = item;
			}

			item > smallest =>
			{
				rest = item :: rest;
			}
		}
		input = tail input;
	}

	return (result: (smallest, rest));
}
