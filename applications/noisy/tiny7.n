tiny7 : module ()
{
	Pixel : adt
	{
		r : nat8;
		g : nat8;
		b : nat8;
		a : nat8;
	};

	customComplex	: type (int64, int64);
	customRational	: type (int64, int64);

	init		: function (arguments: list of string) -> (results: list of string);
	firstFun	: function (argumentA: (int64, int64), argumentB: nat8, argumentC: int64) -> (result: int64);
	secondFun	: function (argumentA: int64, argumentB: string) -> (resultA: int64, resultB: (int64, int64));
	thirdFun	: function (argument: float4) -> (resultA: int64, resultB: float4, resultC: (int64, string, (int64, nat8)), resultD: string);
}

init : function (arguments: list of string) -> (results: list of string) =
{
	a : int64;

	match
	{
		true	=> nil = 0;
	};
}

firstFun : function (argumentA: (int64, int64), argumentB: nat8, argumentC: int64) -> (result: int64) =
{
}

secondFun : function (intArgumen: int64, stringArgument: string) -> (intResult: int64, tupleResult: (int64, int64)) =
{
}

thirdFun : function (argument: Pixel) -> (intResult: int64, pixelResult: Pixel, tupleResult: (int64, string, (int64, nat8)), stringResult: string) =
{
}

localfunc1 : function (argumentA: int64, argumentB: int64) -> (result: int64) =
{
}

localfunc2 : function (floatArgument: float32, intArgument: int64, natArgument: nat8, stringArgument: string) -> (result: int64) =
{
}

localfunc3 : function (argumentA: int64, argumentB: int64) -> (resultA: int64, resultB: (int64, int64)) =
{
}

localfunc4 : function (argumentA: int64, argumentB: int64) -> (result: (int64, int64)) =
{
}
