include "fibonacci.nd"

ConcurrentFibonacci : function (input: valueType) -> (output: valueType) =
{
	incoming := <-input;
	matchseq
	{
		(incoming == 0) =>
		{
			output <-= 0;
		}

		(incoming == 1) =>
		{
			output <-= 1);
		}

		true =>
		{
			#
			#	The '->' selector can be applied to a module to yield
			#	its constituent functions and probdefs.
			#
			#	Applying 'path' to a module or function yields the path to its
			#	implementation.
			#
			c1 := load ConcurrentFibonacci (path ConcurrentFibonacci);
			c1 <-= (incoming - 1);
			c2 := load ConcurrentFibonacci (path ConcurrentFibonacci);
			c2 <-= (incoming - 2);

			#
			#	We can mix function and channel notation as in the line
			#	below where we use `return` rather than output <-= ...
			#
			return (output:(<-c1 + <-c2));
		}
	};
}

init : function	(arguments: list of string) -> (results: list of string) =
{
	#
	#	Load an instance of the Fibonacci module with
	#	type parameter int16. The `load` operator thus
	#	provides a means for runtime specialization of
	#	modules.
	#
	fib := load Fibonacci(int16) (path Fibonacci);

	#
	#	The list of string aguments is the program name
	#	followed by its arguments as strings.
	#
	return (results:(string ConcurrentFibonacci(int16 (head tail arguments)))::nil);
}
