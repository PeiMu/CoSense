include "sortList-variantA.nd"

SelectionSort : progtype
{
	init		: namegen (args: list of string) -> (results: list of string);
	findSmallest	: namegen (stringList: list of string) -> ((string, list of string));

	sort		: namegen (inputList: list of valueType) -> (outputList: list of valueType);
	sort		: probdef (inputList: list of valueType) -> (outputList: list of valueType);
}

init (args: list of string) -> (results: list of string) =
{
	sort <- init;
	init <- sort;
}

sort : namegen (inputList: list of valueType) : (outputList: list of valueType) =
{
	#
	#	Pre-conditions: The init namegen is created, and a valid	
	#		list-of-string input is written to it.
	#
	#	Post-conditions: The reader of the init namegen reads a
	#		list of string whose head is the largest item,
	#		and the items are in non-increasing order from
	#		head to tail, lexicographically.
	#
	rest, result		: list of string;
	smallest		: string;
	findSmallestChannel	:= name2chan (typeof SelectionSort->findSmallest) (string SelectionSort->findSmallest);

	rest =<- init;
	iter
	{
		#
		#	Loop invariants: 'result' list contains no items
		#		larger (lexicographically) than 'rest' list.
		#
		#	Progress: in each iteration, an item is removed
		#		from 'rest'
		#
		#	Termination: when 'rest' is empty.
		#
		len rest > 0	=>
		{
			findSmallestChannel <-= rest;
			(smallest, rest) =<- findSmallestChannel;
			result = smallest :: result;
		}
	};
	sort <-= result;
}

findSmallest =
{
	#
	#	Pre-conditions: The findSmallest namegen is created, and a	
	#		valid list-of-string input is written to it.
	#
	#	Post-conditions: The reader of the findSmallest  namegen
	#		reads a tuple, first item of which is a string, no
	#		larger (lexicographically) than any item on the
	#		incoming list, and the second item in the tuple is a
	#		list of strings being the incoming list with one of
	#		the possible multiple copies of the lexicographically
	#		smallest item removed.
	#
	rest		: list of string;
	input		:=<- findSmallest;
	smallest	:= hd input;

	iter
	{
		#
		#	Loop invariant: 'smallest' is the lexicographically
		#		smallest item seen on input thus far, and
		#		is no smaller than any item in 'rest'.
		#
		#	Progress: in each iteration, an item is removed from
		#		'input'.
		#
		#	Termination: when input list is empty.
		#
		len input > 0	=>
		{
			item := hd input;
			match
			{
				item <= smallest =>
				{
					rest = smallest :: rest;
					smallest = item;
				}

				item > smallest =>
				{
					rest = item :: rest;
				}
			};
			input = tl input;
		}
	};
	findSmallest <-= (smallest, rest);
}
