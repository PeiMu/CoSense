#
#	Authored 2017, Shao-Tuan Chen.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description:	Physical invariant for heat transfer between a hot sphere and the environment
#
#	Necessary variables: 
#
#		R : Radius of the sphere
#
#		T : Temperature difference between the sphere and the environment 
#
#		g : Acceleration of gravity 
#
#		\rho  : Fluid density
#
#		\nu   : Kinematic viscosity
#
#		C_p  : Specific heat  
#
#		\alpha : Thermal diffusivity
#
#		\beta : Thermal expansion
#

time : signal =
{
	name = "second" English;
	symbol = "s";
	derivation = none;
}

distance : signal(i: 0 to 2) =
{
	name = "meter" English;
	symbol = "m";
	derivation = none;
}

mass : signal =
{
	name = "kilogram" English;
	symbol = "kg";
	derivation = none;
}


speed : signal(i: 0 to 2) =
{
	derivation = distance@i / time;
}

acceleration : signal(i: 0 to 2) =
{
	derivation = speed@i / time;
}

force : signal(i: 0 to 2) = 
{
	name = "Newton" English;
	symbol = "N" ;
	derivation = mass * acceleration@i;
}

work : signal(i: 0 to 2) = 
{
	name = "Joule" English;
	symbol = "J";
	derivation = force * distance@i;
}

temperature : signal = 
{ 
	name = "Kelvin" English; 
	symbol = "K"; 
	derivation = none;
}

g : constant = 9.8 * m ** 2 * s ** -2;
rho : constant = 1 * kg * m ** -3;
v : constant = 10 * m ** 2 * s ** -1;
cp : constant = 1 * m ** 2 * s ** -2 * K ** -1;
a : constant = 1 * m ** 2 * s ** -1;
b : constant = 1 * K ** -1;

#
#		Dimensional Matrix:
#
#
#		R  T  g  r  v  c  a  b
#	 L  1  0  1 -3  2  2  2  0
#	 M  0  0  0  1  0  0  0  0
#	 T  0  0 -2  0 -1 -2 -1  0
#	 O  0  1  0  0  0 -1  0 -1
#
#
#		z = null(A,'r')
#
#

hotSphere : invariant(Q: work@0, t: temperature, r: distance) =
{
	Q ~ (b * g * t * r ** 3 / (v ** 2)) 
}
