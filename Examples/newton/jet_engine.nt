#
#	Authored 2017, Jonathan Lim.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Invariants for an instrumented jet engine.
#

time : signal = {
	name = "second" English;
	symbol = "s";
	derivation = none;
}

mass : signal = {
	name = "kilogram" English;
	symbol = "kg";
	derivation = none;
}

mass_flow_rate: signal = {
	derivation = mass / time;
}

distance : signal = {
	name = "meter" English;
	symbol = "m";
	derivation = none;
}

area : signal = {
	derivation = distance ** 2;
}

speed : signal = {
	derivation = distance / time;
}

acceleration : signal = {
	derivation = speed / time;
}

force : signal = {
	name = "Newton" English;
	symbol = "N" ;
	derivation = mass * acceleration;
}

pressure: signal = {
	name = "Pascal" English;
	symbol = "Pa";
	derivation = force / area;
}

SamplingTime: constant = 5 * 10 ** -3 * s;

MooreGreitzerJetEngineModel: invariant(
	x: mass_flow_rate,
	y: pressure
) = 
{
	x * kg ** 2 * s ** 4	>	-y * kg ** 3 * s ** 3 / Pa - 1.5 * (x * SamplingTime) ** 2 * kg * s ** 3  - 0.5 * (x * SamplingTime) ** 3 * s ** 3 - 0.5 * kg ** 3 * s ** 3,
	y / SamplingTime * kg	~	3 * x * Pa - y * kg / s 
}
