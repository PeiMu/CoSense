#
#	Authored 2017, Jonathan Lim.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Invariants for a simple pendulum.
#

time : signal = 
{
	name = "second" English;
	symbol = "s";
	derivation = none;
}

distance : signal(i: 0 to 2) =
{
	name = "meter" English;
	symbol = "m";
	derivation = none;
}

mass : signal =
{
	name = "kilogram" English;
	symbol = "kg";
	derivation = none;
}

speed : signal(i: 0 to 2) =
{
	derivation = distance@i / time;
}

acceleration : signal(i: 0 to 2) =
{
	derivation = speed@i / time;
}

force : signal(i: 0 to 2) = 
{
	name = "Newton" English;
	symbol = "N" ;
	derivation = mass * acceleration@i;
}

work : signal(i: 0 to 2) = 
{
	name = "Joule" English;
	symbol = "J";
	derivation = force * distance@i;
}

Pi : constant = 3.14159;
g : constant = 9.8 * meter ** 2 * second ** -2;
# G : constant = 6.674 * meter ** 3 * kilogram ** -1 * second ** -2;
# myConstant : constant = -1.11 * meter ** (3 ** (8 + 2)); this line causes infinite loop.... maybe because exponent was too big..
myConstant : constant = -1.11 * meter ** (2 ** (1 + 1));

SimplePendulum : invariant(L: distance@0, period: time) =
{
	L >= 2.2 * meter,
	L <=  10 * meter,
	L @< 5 * meter,
	period ~ (4 * Pi * Pi * L / g) ** 3,
	period >= 3 * second,
	period <= 9 * second
}
