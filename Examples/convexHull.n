#
#	This formulation is similar in style to the SlowConvexHull algorithm
#	given on page 3 of de Berg, van Kreveld, Overmars & Schwartzkopf.
#	
#	The sign of the determinant
#	
#			| 1 px py |
#		D =	| 1 qx qy |  = (qx*ry - qy*rx) - px(ry - qy) + py(rx-qx),
#			| 1 rx ry |
#	
#	denotes whether r is on left or right of line pq.
#
convexHull : progtype
{
	init			: namegen	(inputPoints: list of (int, int)) -> (convexHull: list of (int, int));

	pqDiffer		: predicate	(qx:integer, qy:integer) @ (px:integer, py:integer);

	nonNegativeDeterminant	: predicate	(qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer);
	qOnUpperRight		: predicate	(qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer);
	qOnUpperLeft		: predicate	(qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer);
	qOnLowerLeft		: predicate	(qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer);
	qOnLowerRight		: predicate	(qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer);
	qOnRight		: predicate	(qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer);
	qAbove			: predicate	(qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer);
	qOnLeft			: predicate	(qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer);
	qBelow			: predicate	(qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer);
}



#
#	Several predicate functions for the eventual problem definition
#
pqDiffer : predicate (qx:integer, qy:integer) @ (px:integer, py:integer) =
{
	!((qy == py) & (qx == px))
}

nonNegativeDeterminant : predicate (qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer) =>
{
	((qx*ry - qy*rx) - px*(ry - qy) + py*(rx - qx)) >= 0
}

qOnUpperRight : predicate (qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer) =>
{
	((qy > py) & (qx < px) & nonNegativeDeterminant(qx, qy, rx, ry)@(px, py))
}

qOnUpperLeft : predicate (qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer) =>
{
	((qy > py) & (qx > px) & nonNegativeDeterminant(qx, qy, rx, ry)@(px, py))
}

qOnLowerLeft : predicate (qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer) =>
{
	((qy < py) & (qx < px) & nonNegativeDeterminant(qx, qy, rx, ry)@(px, py))
}

qOnLowerRight : predicate (qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer) =>
{
	((qy < py) & (qx > px) & nonNegativeDeterminant(qx, qy, rx, ry)@(px, py))
}

qOnRight : predicate (qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer) =>
{
	((qy == py) & (qx > px) & nonNegativeDeterminant(qx, qy, rx, ry)@(px, py))
}

qAbove : predicate (qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer) =>
{
	((qx == px) & (qy > py) & nonNegativeDeterminant(qx, qy, rx, ry)@(px, py))
}

qOnLeft : predicate (qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer) =>
{
	((qy == py) & (qx < px) & nonNegativeDeterminant(qx, qy, rx, ry)@(px, py))
}

qBelow : predicate (qx:integer, qy:integer, rx:integer, ry:integer) @ (px:integer, py:integer) =>
{
	((qx == px) & (qy < py) & nonNegativeDeterminant(qx, qy, rx, ry)@(px, py))
}



#
#	Problem definition. This is a Boolean predicate that should
#	evaluate to 'True' when applied to any output value of the
#	namegen.
#
init : probdef (inputPoints: list of (integer, integer)) -> (convexHull: list of (integer, integer)) =>
{
	#
	#	Given a point (px, py) on the list convexHull, there
	#	exists a point (qx, qy) in the list inputPoints (and by
	#	extension, in convexHull) such that for all points
	#	(rx, ry) on the list inputPoints, (rx, ry) is on the left
	#	or the right of the line from (px, py) to (qx, qy) (as
	#	appropriate, by quadrant of the 2D space).
	#
	given ((px, py) in convexHull)
	(
		exists ((qx, qy) in inputPoints)
		(
			forall ((rx, ry) in inputPoints)
			(
				pqDiffer(qx, qy) @ (px, py) &
				(
					  qOnUpperRight	(qx, qy, rx, ry) @ (px, py)
					| qOnUpperLeft	(qx, qy, rx, ry) @ (px, py)
					| qOnLowerLeft	(qx, qy, rx, ry) @ (px, py)
					| qOnLowerRight	(qx, qy, rx, ry) @ (px, py)
					| qOnRight	(qx, qy, rx, ry) @ (px, py)
					| qAbove	(qx, qy, rx, ry) @ (px, py)
					| qOnLeft	(qx, qy, rx, ry) @ (px, py)
					| qBelow	(qx, qy, rx, ry) @ (px, py)
				)
			)
		)
	)
}



#
#	Algorithm implementation
#
init : namegen (inputPoints: list of (int, int)) -> (convexHull: list of (int, int)) =
{
}
