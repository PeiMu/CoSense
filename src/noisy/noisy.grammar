/*
 *	Lexical elements
 */
character		::=	Unicode-0000h-to-Unicode-FFFFh .
reservedOperatorOrSeparatorToken ::=	"~" | "!" | "%" | "^" | "&" | "*" | "(" | ")" | "," | "-" | "+" | "="
				| "/" | ">" | "<" | ";" | ":" | "'" | "\"" | "{" | "}" | "[" | "]" | "|" 
				| "<-" | "." | "<=" | ">=" | "^=" | "|=" | "&=" | "%=" | "/=" | "*=" | "-="
				| "+=" | ":=" | "!=" | ">>" | ">>=" | "<<" | "<<=" | "<-=" | "&&" | "||" 
				| "::" | "=>" | "<=>" | "==" | "++" | "--" | ">=<" | "@" .

reservedIdentifiers		::=	"A" | "K" | "acceleration" | "adt" | "alpha" | "Ampere" | "and" |
				"anglerate" | "bool" | "candela" | "cardinality" | "cd" |
				"complex" | "const" | "crossproduct" | "current" | "dimensions" |
				"distance" | "dotproduct" | "epsilon" | "erasures" |
				"distortions" | "exists" | "false" | "fixed" | "float128" "float16" |
				"float32" | "float4" | "float64" | "float8" | "forall" | "fourier" |
				"function" | "given" | "head" | "highpass" | "relativehumidity" |
				"in" | "int128" | "int16" | "int32" | "int4" |
				"int64" | "int8" | "iterate" | "Kelvin" | "kg" | "kilogram" | "latency" |
				"length" | "list" | "load" | "lowpass" | "luminosity" | "m" | "magneticflux" |
				"mass" | "match" | "matchseq" | "material" | "meter" | "module" | "mole" |
				"nat128" | "nat16" | "nat32" | "nat4" | "nat64" | "nat8" | "nil" | "of" |
				"omega" | "parallel" | "predicate" | "pressure" | "probdef" | "quantize" |
				"rational" | "return" | "reverse" | "s" | "samples" | "second" |
				"sequence" | "set" | "sigfigs" | "signal" | "sort" | "string" | "tail" |
				"tailtip" | "tau" | "tderivative" | "temperature" | "time" | "timebase" |
				"timeseries" | "tintegral" | "true" | "type" | "typeannote" | "typemax" |
				"typemin" | "units" | "valfn" | "vector" .

zeroToNine		=	"0-9" .
oneToNine		=	"1-9" .
radix			=	oneToNine {zeroToNine} "r" .
charConst		=	"'" character "'" .
integerConst		::=	["+" | "-"] [radix] ("0" | oneToNine {zeroToNine}) | charConst .
boolConst		::=	"true" | "false" .
drealConst		=	("0" | oneToNine {zeroToNine}) "." {zeroToNine} .
erealConst		=	(drealConst | integerConst) ("e" | "E") integerConst .
realConst		::=	["+" | "-"] (drealConst | erealConst) .
stringConst		::=	"\"" {character} "\"" .
idchar			=	char-except-rsvopseptoken .
identifier		::=	(idchar-except-zeroToNine) {idchar} .

/*
 *	Syntactic elements: top-level program structure
 */
program			::=	moduleDecl {(functionDefn | problemDefn | predicateFnDefn)} .
functionDefn		::=	identifier ":" "function" signature "->" signature "="  scopedStatementList .
problemDefn		::=	identifier ":" "probdef" signature "->" signature "=>" scopedPredStmtList .
predicateFnDefn		::=	identifier ":" "predicate" signature "=>" scopedPredStmtList .
signature		::=	"(" [identifier ":" typeExpr {"," identifier ":" typeExpr}] ")" .
moduleDecl		::=	identifier ":" "module" "(" typeParameterList ")" "{" moduleDeclBody "}" .
moduleDeclBody		=	{moduleTypeNameDecl ";"} .

/*
 *	Types
 */
moduleTypeNameDecl	::=	identifier ":" (constantDecl | typeDecl | typeAnnoteDecl | functionDecl | probdefDecl | predicateFnDecl) .
constantDecl		=	"const" (integerConst | realConst | boolConst) .
typeDecl		=	("type" typeExpr) | adtTypeDecl | vectorTypeDecl .
typeAnnoteDecl		::=	"typeannote" typeAnnoteList .
adtTypeDecl		::=	"adt" "{" identifierList ":" typeExpr ";" {identifierList ":" typeExpr ";"} [valfnSignature ";"] "}" .
valfnSignature		=	identifier ":" "valfn" .
vectorTypeDecl		::=	"vector" "[" integerConst "]" "of" typeExpr .
functionDecl		::=	"function" writeTypeSignature "->" readTypeSignature .
probdefDecl		::=	"probdef" writeTypeSignature "->" readTypeSignature .
readTypeSignature	=	signature .
writeTypeSignature	=	signature .
predicateFnDecl		::=	"predicate" signature .
identifierOrNil		=	(identifier {fieldSelect}) | "nil" .
identifierOrNilList	=	identifierOrNil {"," identifierOrNil} .
identifierList		=	identifier {"," identifier} .
typeExpr		::=	(basicType ["and" typeAnnoteList]) | anonAggregateType | typeName .
typeAnnoteItem		= 	dimensionsDesignation | unitsDesignation | signalDesignation
				| timeseriesDesignation | sigfigDesignation | tolerance .
typeAnnoteList		=	typeAnnoteItem {"and" typeAnnoteItem} .
typeName		::=	identifier ["->" identifier] .
dimensionsDesignation	::=	"dimensions" dimensionArithExpr .
sigfigDesignation	::=	"sigfigs" integerConst .
signalDesignation	::=	"signal" (basicSignal | identifier) .
timeseriesDesignation	::=	"timeseries" .
unitsDesignation	::=	"units" unitsArithExpr .
dimensionArithFactor	::=	basicSignalDimension | "(" dimensionArithExpr ")" .
dimensionArithTerm	::=	dimensionArithFactor {highPrecedenceArith2ArithOp dimensionArithFactor} .
dimensionArithExpr	::=	dimensionArithTerm {lowPrecedenceArith2ArithOp dimensionArithTerm} .
unitsArithFactor	::=	(basicSignalUnits | identifier | numericConst) | "(" unitsArithExpr ")" .
unitsArithTerm		::=	unitsArithFactor {highPrecedenceArith2ArithOp unitsArithFactor} .
unitsArithExpr		::=	unitsArithTerm {lowPrecedenceArith2ArithOp unitsArithTerm} .
basicSignalDimension	::=	"distance" | "mass" | "time" | "material" | "current" | "luminosity" | "temperature" .
basicSignalUnits	::=	"m" | "kg" | "s" | "mole" | "A" | "cd" | "K" | "meter" | "kilogram" | "second" | "mole" | "Ampere" | "candela" | "Kelvin" .
basicSignal		::=	basicSignalDimension | "pressure" | "acceleration" | "magneticfluxdensity"
				| "relativehumidity" | "anglerate" .
tolerance		::=	accuracyTolerance | lossTolerance | latencyTolerance .
accuracyTolerance	::=	"epsilon" "(" realConst "," realConst ")" .
lossTolerance		::=	"alpha" "(" realConst "," realConst ")" .
latencyTolerance	::=	"tau" "(" realConst "," realConst ")" .
basicType		::=	"bool" | integerType | realType | "string" .
integerType		::=	"nat4" | "nat8" | "nat16" | "nat32" | "nat64" | "nat128"
				| "int4" | "int8" | "int16" | "int32" | "int64" | "int128" .
realType		::=	"float4" | "float8" | "float16" | "float32" | "float64" | "float128" | fixedType .
fixedType		::=	"fixed" integerConst "." integerConst .
arithmeticType		::=	integerType | realType | fixedType | rationalType .
complexType		::=	"complex" arithmeticType .
anonAggregateType	::=	arrayType | listType | tupleType | setType | rationalType | complexType .
arrayType		::=	"array" "[" integerConst "]" {"[" integerConst "]"} "of" typeExpr .
listType		::=	"list" "of" typeExpr .
tupleType		::=	"(" typeExpr {"," typeExpr} ")" .
setType			::=	"set" "[" integerConst "]" "of" typeExpr .
rationalType		::=	"rational" arithmeticType .
numericConst		=	integerConst | realConst .
initList		=	"{" expression {"," expression} "}" .
idxInitList		=	"{" element {"," element} "}" .
starInitList		=	"{" element {"," element} ["," "*" "=>" expression] "}" .
element			=	expression [ "=>" expression ] .
typeParameterList	=	[identifier ":" "type" {"," identifier ":"  "type"}] .

/*
 *	Statements
 */
scopedStatementList	::=	"{" statementList "}" .
statementList		=	{statement} .
statement		::=	[ assignmentStatement | matchStatement | iterateStatement | sequenceStatement
				| parallelStatement | scopedStatementList | operatorToleranceDecl | returnStatement] ";" .
assignmentStatement	::=	identifierOrNilList ((":" (constantDecl | typeDecl | typeExpr)) | (assignOp expression))
				| "(" identifierOrNilList ")" assignOp expression .
returnStatement		::=	"return" returnSignature .
returnSignature		=	"(" [identifier ":" expression {"," identifier ":" expression}] ")" .
operatorToleranceDecl	=	(highPrecedenceBinaryOp | lowPrecedenceBinaryOp | unaryOp) ":" typeExpr .
assignOp		::=	"=" | "^=" | "|=" | "&=" | "%=" | "/=" | "*=" | "-=" | "+=" | ">>="
				| "<<=" | "<-=" | ":=" .
matchStatement		::=	("match" | "matchseq") "{" guardedStatementList "}" .
iterateStatement	::=	"iterate" "{" guardedStatementList "}" .
sequenceStatement	::=	"sequence" (orderingHead | setHead) scopedStatementList .
parallelStatement	::=	"parallel" setHead scopedStatementList .
setHead			=	"(" identifier "in" expression ")" .
orderingHead		=	"(" assignmentStatement ";" expression ";" assignmentStatement ")" .
guardedStatementList	=	{(expression | chanEventExpr) "=>" (statementList | scopedStatementList)} .
guardedExpressionList	=	{expression "=>" expression} .

/*
 *	Expressions
 */
expression		::=	(term {lowPrecedenceBinaryOp term}) | anonAggrCastExpr
				| loadExpr | quantizeExpression .
quantizeExpression	::=	identifier "quantize" "{" guardedExpressionList "}" .
listCastExpr		::=	"list" "of" initList .
setCastExpr		::=	"set" "of" initList .
arrayCastExpr		::=	"array" (("of" idxInitList) | ("[" integerConst "]" "of" starInitList)) .
complexCastExpr		::=	"complex" "(" expression "," expression ")" .
rationalCastExpr	::=	"rational" "(" expression "," expression ")" .
anonAggrCastExpr	::=	listCastExpr | setCastExpr | arrayCastExpr | complexCastExpr | rationalCastExpr .
chanEventExpr		::=	("erasures" | "distortions" | "latency") "of" identifier cmpOp expression .
loadExpr		::=	"load" identifier [tupleType] (stringConst | ("path" typeName)) .
term			::=	[basicType] [unaryOp] factor ["++" | "--"] {highPrecedenceBinaryOp factor} .
factor			::=	(identifier {fieldSelect}) | integerConst | realConst | stringConst | boolConst
				| "(" expression ")" | tupleValue | namegenInvokeShorthand | typeMinExpr | typeMaxExpr .
typeMinExpr		::=	"typemin" "(" arithmeticType ")" .
typeMaxExpr		::=	"typemax" "(" arithmeticType ")" .
namegenInvokeShorthand	=	identifier "(" [identifier ":" expression {","  identifier ":" expression}] ")" .
tupleValue		::=	"(" identifierOrNilList ")" .
fieldSelect		::=	("." identifier) | ("[" expression [":" expression] "]") .
highPrecedenceBinaryOp	::=	"*" | "/" | "%" | "&" | "^" | "::" | "lowpass" | "highpass" | "dotproduct"
				| "crossproduct" | "centralmoment" | highPrecedenceBinaryBoolOp .
lowPrecedenceBinaryOp	::=	"+" | "-" | ">>" | "<<" | "|"  | cmpOp | lowPrecedenceBinaryBoolOp .
cmpOp			::=	"==" | "!=" | ">" | "<" | "<=" | ">=" | ">=<" .
unaryOp			::=	"~" | "-"  | "+" | "<-"  | "head" | "tail" | "tailtip"| "length" | "sort" | "uncertainty"
				| "tintegral" | "tderivative" | "timebase" | "sigfigs" | "samples" | "reverse"
				\| "fourier" | "cardinality" | "frequencies" | "magnitudes" | unaryBoolOp .

/*
 *	Predicate expressions, the declarative subset of Noisy.
 */
lowPrecedenceBinaryBoolOp	::=	"||" .
highPrecedenceBinaryBoolOp	::=	"&&" | "^" .
unaryBoolOp			::=	"!" .
arith2BoolOp			::=	"==" | "!=" | ">" | ">=" | "<" | "<=" .
highPrecedenceArith2ArithOp	::=	"*" | "/" | "%" | "&" | "pow" | "nrt" | "log" .
lowPrecedenceArith2ArithOp	::=	"+" | "-" .

scopedPredStmtList	::=	"{" predStmtList "}" .
predStmtList		=	{predStmt} .
predStmt		::=	predExpr "," .
predFactor		::=	boolConst | identifier | "(" predExpr ")" .
predTerm		::=	predFactor {highPrecedenceBinaryBoolOp predFactor}
				| predArithExpr arith2BoolOp ["@" (intParamOrConst | realParamOrConst)] predArithExpr
				| quantifiedBoolTerm | setCmpTerm | varTuple "in" ["@" (intParamOrConst | realParamOrConst)] setExpr
				| unaryBoolOp predFactor .
predExpr		::=	predTerm {lowPrecedenceBinaryBoolOp predTerm} .
varIntro		::=	identifier "in" (setExpr | typeExpr) .
varIntroList		::=	varIntro {"," varIntro} .
varTuple		::=	"(" identifier {"," identifier} ")" .
arithConst		::=	intParamOrConst | realParamOrConst .
predArithFactor		::=	arithConst | varIntro | identifier | "(" predArithExpr ")" .
predArithTerm		::=	predArithFactor {highPrecedenceArith2ArithOp predArithFactor} .
predArithExpr		::=	predArithTerm {lowPrecedenceArith2ArithOp predArithTerm}
				| sumOverExpr | productOverExpr | minOverExpr | maxOverExpr .
sumOverExpr		::=	"sum" sumProdMinMaxBody .
productOverExpr		::=	"product" sumProdMinMaxBody .
minOverExpr		::=	"min" sumProdMinMaxBody .
maxOverExpr		::=	"max" sumProdMinMaxBody .
sumProdMinMaxBody	::=	["for" varIntro ["from" predArithExpr "to" predArithExpr]] ["with" predExpr] "of" "(" predArithExpr ")" .
quantifiedBoolTerm	::=	quantifierOp varIntroList "(" predExpr ")" .
setCmpTerm		::=	setExpr setCmpOp setExpr .
setFactor		::=	constSetExpr ":" typeExpr | "{" "}" | "omega"
				| "(" setExpr ")" | "(" predExpr ":" typeExpr ")" .
setTerm			::=	setFactor {highPrecedenceBoolSetOp setFactor}
				| unarySetOp setFactor .
setExpr			::=	setTerm {lowPrecedenceBoolSetOp setTerm} .
intParamOrConst		::=	integerConst | identifier .
realParamOrConst	::=	realConst | identifier .
stringParamOrConst	::=	stringConst | identifier .
baseConst		=	intParamOrConst | realParamOrConst | stringParamOrConst .
tuple			::=	"(" baseConst {"," baseConst} ")" .
constSetExpr		::=	"{" tuple {"," tuple} "}" | "{" baseConst {"," baseConst} "}" .
highPrecedenceBoolSetOp	::=	"#" | "><" .
lowPrecedenceBoolSetOp	::=	"+" | "-" | "^" | "=>" | "<=>" .
unarySetOp		::=	"powerset" | "complement" .
quantifierOp		::=	"forall" | "exists" | "given" .
setCmpOp		::=	"strongdominates" | "weakdominates" .
