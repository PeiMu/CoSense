/*
 *	Lexical elements
 */
character		::=	Unicode-0000h-to-Unicode-FFFFh .
rsvopseptoken		::=	"~" | "!" | "%" | "^" | "&" | "*" | "(" | ")" | "," | "-" | "+" | "="
				| "/" | ">" | "<" | ";" | ":" | "'" | "\"" | "{" | "}" | "[" | "]" | "|" 
				| "<-" | "." | "<=" | ">=" | "^=" | "|=" | "&=" | "%=" | "/=" | "*=" | "-="
				| "+=" | ":=" | "!=" | ">>" | ">>=" | "<<" | "<<=" | "<-=" | "&&" | "||" 
				| "::" | "=>" | "<=>" | "==" | "++" | "--" | ">=<" .

***** TODO: check where each of these is used in grammar
					
rsvdidentifiers		::=	"A", "acceleration", "adt", "alpha", "K", "ampere", "andover",
				"anglerate", "bool", "byte", "candela", "cardinality", "cd", "chan", "chan2name",
				"complex", "const", "crossproduct", "current", "dimensions",
				"dimparam", "distance", "dotproduct", "else", "epsilon", "erasures",
				"errors", "false", "fixed", "float128" "float16", "float32",
				"float4", "float64", "float8", "fn", "foreach", "given", "head",
				"highpass", "if", "imaginary", "int", "int128", "int16", "int32", "int4",
				"int64", "int8", "iter", "kelvin", "kg", "kilogram", "latency",
				"len", "list", "lowpass", "luminosity", "m", "magneticflux", "mass",
				"match", "matchseq", "material", "meter", "mole", "name2chan",
				"namegen", "nat128", "nat16", "nat32", "nat4", "nat64", "nat8",
				"nil", "of", "omega", "fourier", "predicate", "pressure",
				"progtype", "rat", "real", "humidity", "reverse", "s", "samples",
				"second", "sequence", "set", "sigfigs", "signal", "sort", "string",
				"tau", "tderivative", "temperature", "time", "timebase",
				"timeseries", "tintegral", "tail", "true", "type", "typeof", "typeannote",
				"typemin", "typemax", "unionover", "units", "valfn", "var2name",
				"vector" .

zeronine		=	"0-9" .
onenine			=	"1-9" .
radix			=	onenine {zeronine} "r" .
charconst		=	"'" character "'" .
integerConst		::=	["+" | "-"] [radix] ("0" | onenine {zeronine}) | charconst .
boolConst		::=	"true" | "false" .
drealConst		=	("0" | onenine {zeronine}) "." {zeronine} .
erealConst		=	(drealConst | integerConst) ("e" | "E") integerConst .
realConst		::=	["+" | "-"] (drealConst | erealConst) .
numericConst		::=	integerConst | realConst .
stringConst		::=	"\"" {character} "\"" .
idchar			=	char-except-rsvopseptoken .
identifier		::=	(idchar-except-zeronine) {idchar} .

/*
 *	Syntactic elements
 */
program			::=	progtypedecl {(namegendefn | problemdefn | predicatefndefn)} .
progtypedecl		=	identifier ":" "progtype" "(" typeParameterList ")" "{" progtypebody "}" .
progtypebody		=	{ptypenamedecl ";"} .
ptypenamedecl		::=	identlist ":" (condecl | typedecl | namegendecl | probdefdecl | predicatefndecl) .
condecl			=	"const" (integerConst | realConst | boolConst) .
typedecl		=	("type" typeExpr) | adttypedecl | vectortypedecl .
typeAnnoteDecl		::=	"typeannote" typeAnnoteList .
adttypedecl		::=	"adt" "{" identlist ":" typeExpr ";" {identlist ":" typeExpr ";"} [valfnsignature ";"] "}" .
valfndefn		=	identifier ":" "valfn" .
vectortypedecl		::=	"vector" "[" integerConst "]" of typeExpr .
namegendecl		::=	"namegen" writeTypeSignature "->" readTypeSignature .
probdefdecl		::=	"probdef" writeTypeSignature "->" readTypeSignature .
readTypeSignature	=	signature .
writeTypeSignature	=	signature .
predicatefndecl		::=	"predicate" boundVariablesSignature "@" freeVariablesSignature .
boundVariablesSignature	=	signature .
freeVariablesSignature	=	signature .
identornil		::=	(identifier {fieldselect}) | "nil" .
identornillist		=	identornil {"," identornil} .
identlist		=	identifier {"," identifier} .
typeExpr		::=	(basictype typeAnnoteList) | anonaggrtype | typename .

***** TODO: this needs to be cleaned up.....
typeAnnoteList		::= 	[dimensionsDesignation]
				["," unitsDesignation]
				["," signalDesignation]
				["," timeseriesDesignation]
				["," sigfigDesignation]
				["," tolerance {"," tolerance}] .
typename		::=	identifier ["->" identifier] .
dimensionsDesignation	::=	"dimensions" dimensionArithExpr.
sigfigDesignation	::=	"sigfigs" integerConst .
signalDesignation	::=	"signal" (basicSignal | identifier)
timeseriesDesignation	::=	"timeseries" .
unitsDesignation	::=	"units" unitsArithExpr .
dimensionArithFactor	::=	basicSignalDimension | "(" dimensionArithExpr ")" .
dimensionArithTerm	::=	dimensionArithFactor {highPrecedenceArith2ArithOp dimensionArithFactor} .
dimensionArithExpr	::=	dimensionArithTerm {lowPrecedenceArith2ArithOp dimensionArithTerm} .
unitsArithFactor	::=	(basicSignalUnits | identifier | numericConst) | "(" unitsArithExpr ")" .
unitsArithTerm		::=	unitsArithFactor {highPrecedenceArith2ArithOp unitsArithFactor} .
unitsArithExpr		::=	unitsArithTerm {lowPrecedenceArith2ArithOp unitsArithTerm} .
basicSignalDimension	::=	"distance" | "mass" | "time" | "material" | "current" | "luminosity" | "temperature" .
basicSignalUnits	::=	"m" | "kg" | "s" | "mole" | "A" | "cd" | "K" .
basicSignal		::=	basicSignalDimension | "pressure" | "acceleration" | "magneticfluxdensity"
				| "relativehumidity" | "anglerate" .
tolerance		=	errormagtolerance | losstolerance | latencytolerance .
errormagtolerance	=	"epsilon" "(" realConst "," realConst ")" .
losstolerance		=	"alpha" "(" realConst "," realConst ")" .
latencytolerance	=	"tau" "(" realConst "," realConst ")" .
basictype		::=	"bool" | integertype | realtype | "string" .
integertype		::=	"nat4" | "nat8" | "nat16" | "nat32" | "nat64" | "nat128"
				| "int4" | "int8" | "int16" | "int32" | "int64" | "int128" .
realtype		=	"float4" | "float8" | "float16" | "float32" | "float64" | "float128" | fixedtype .
fixedtype		=	"fixed" integerConst "." integerConst .
arithmeticType		::=	integerType | realType | fixedType | rationalType .
complexType		=	"complex" arithmeticType .
anonaggrtype		::=	arraytype | listtype | tupletype | settype | rationalType | complexType .
arraytype		=	"array" "[" integerConst "]" {"[" integerConst "]"} of typeExpr .
listtype		=	"list" "of" typeExpr .
tupletype		=	"(" typeExpr {"," typeExpr} ")" .
settype			=	"set" "[" integerConst "]" "of" typeExpr .
rationalType		=	"rational" arithmeticType .
initlist		=	"{" expr {"," expr} "}" .
idxinitlist		=	"{" element {"," element} "}" .
starinitlist		=	"{" element {"," element} ["," "*" "=>" expr] "}" .
element			=	expr [ "=>" expr ] .
signature		::=	"(" [identifier ":" typeExpr], {"," identifier ":" typeExpr} ")" .
typeParameterList	::=	"(" [identifier ":" "type"], {"," identifier ":"  "type"} ")" .
valfndefn		::=	identifier ":" "valfn" adtType "="  scopedstmtlist .
namegendefn		::=	identifier ":" "namegen" signature "->" signature "="  scopedstmtlist .
problemdefn		::=	identifier ":" "probdef" signature "->" signature "=>" scopedPredStmtList .
predicatefndefn		::=	identifier ":" "predicate" signature "@" signature "=>" scopedPredStmtList .
scopedstmtlist		::=	"{" stmtlist "}" .
stmtlist		=	{stmt} .
stmt			::=	[ identornillist ((":" (condecl | typedecl | typeExpr)) | (assignop expr))
				| "(" identornillist ")" assignop expr | matchstmt | iterstmt | sequencestmt 
				| foreachstmt | scopedstmtlist | operatorToleranceDecl] ";" .
operatorToleranceDecl	::=	(hprecbinop | lprecbinop | unop) ":" typeExpr .
assignop		::=	"=" | "^=" | "|=" | "&=" | "%=" | "/=" | "*=" | "-=" | "+=" | ">>="
				| "<<=" | "<-=" | ":=" .
matchstmt		::=	("match" | "matchseq") "{" guardbody "}" .
iterstmt		::=	"iter" "{" guardbody "}" .
sequencestmt		::=	"sequence" "(" assignmentStatement ";" booleanExpression ";" assignmentStatement
				")" scopedStatementList .
foreachstmt		::=	"foreach" "(" identifier "in" expr ")" scopedStatementList .
guardbody		=	{expr "=>" (stmtlist | scopedstmtlist)} .
expr			::=	(term {lprecbinop term}) | anonaggrcastexpr | chanevtexpr
				| chan2nameexpr | var2nameexpr | name2chanexpr .
listcastexpr		=	"list" "of" initlist .
setcastexpr		=	"set" "of" initlist .
arrcastexpr		=	"array" (("of" idxinitlist) | ("[" integerConst "]" of starinitlist)) .
complexCastExpr		=	"complex" "(" arithConst "," arithConst ")" .
rationalCastExpr	=	"rat" expression expression .
anonaggrcastexpr	::=	listcastexpr | setcastexpr | arrcastexpr | complexCastExpr | rationalCastExpr .
chanevtexpr		::=	("erasures" | "errors" | "latency") "of" identifier cmpop expr .
chan2nameexpr		::=	"chan2name" factor [stringConst] .
var2nameexpr		::=	"var2name" factor [stringConst] .
name2chanexpr		::=	"name2chan" typeExpr expr realConst .
term			::=	[basictype] [unop] factor ["++" | "--"] {hprecbinop factor} .
factor			::=	(identifier {fieldselect}) | integerConst | realConst | stringConst | boolConst
				| "(" expr ")" | tuplevalue | namegenInvokeShorthand | typeMinExpr | typeMaxExpr
				| namegenWriteShorthand .
namegenWriteShorthand	::=	identifier "(" argumentList ")" .
argumentList		=	[identifier ":" expr {"," identifier ":" expr}] .
typeMinExpr		::=	"typemin" "(" arithType ")" .
typeMaxExpr		::=	"typemax" "(" arithType ")" .
namegenInvokeShorthand	::=	identifier "(" [expr] {"," expr} ")" .
tuplevalue		::=	"(" identornillist ")" .
fieldselect		::=	("." identifier) | ("[" expr [":" expr] "]") .
hprecbinop		::=	"*" | "/" | "%" | "^" | "::" | "lowpass" | "highpass" | "dotproduct"
				| "crossproduct" | "centralmoment" .
lprecbinop		::=	"+" | "-" | ">>" | "<<" | "|"  | cmpop | booleanop .
cmpop			::=	"==" | "!=" | ">" | "<" | "<=" | ">=" .
booleanop		::=	"&&" | "||" .
unop			::=	"~" | "!" | "-"  | "+" | "<-"  | "head" | "tail" | "len" | "sort" | "uncertainty"
				| "tintegral" | "tderivative" | "timebase" | "sigfigs" | "samples" | "reverse"
				| "fourier" | "typeof" | "cardinality" .
highPrecedenceBinaryBoolOp	::=	"&&" | "^" .
lowPrecedenceBinaryBoolOp	::=	"||" .
unaryBoolOp		::=	"!" .
arith2BoolOp		::=	"==" | "!=" | ">" | ">=" | "<" | "<=" .
highPrecedenceArith2ArithOp	::=	"*" | "/" | "%" | "pow" | "nrt" | "log" . 
lowPrecedenceArith2ArithOp	::=	"+" | "-" .

/*
 *	Predicate expressions, the delcarative subset of Noisy.
 */
scopedPredStmtList	::=	"{" predStmtList "}" .
predStmtList		=	{predStmt} .
predStmt		::=	predExpr "," .
predFactor		::=	boolConst | identifier | "(" predExpr ")" .
predTerm		::=	predFactor {highPrecedenceBinaryBoolOp predFactor}
			|	predArithExpr arith2BoolOp ["@" (intParamOrConst | realParamOrConst)]
				predArithExpr
			|	quantifiedBoolTerm | setCmpTerm | varTuple "in"
				["@" (intParamOrConst | realParamOrConst)] setExpr
			|	unaryBoolOp predFactor .
predExpr		::=	predTerm {lowPrecedenceBinaryBoolOp predTerm} .
boolConst		::=	"true" | "false" .
varIntro		::=	identifier "in" (setExpr | typeExpr) .
varIntroList		::=	varIntro {"," varIntro} .
varTuple		::=	"(" identifier {"," identifier} ")" .
arithConst		::=	intParamOrConst | realParamOrConst .
predArithFactor		::=	arithConst | varIntro | identifier | "(" predArithExpr ")" .
predArithTerm		::=	predArithFactor {highPrecedenceArith2ArithOp predArithFactor} .
predArithExpr		::=	predArithTerm {lowPrecedenceArith2ArithOp predArithTerm}
				| sumOverExpr | productOverExpr | minOverExpr | maxOverExpr .
sumOverExpr		::=	"sum" sumProdMinMaxBody .
productOverExpr		::=	"product" sumProdMinMaxBody .
minOverExpr		::=	"min" sumProdMinMaxBody .
maxOverExpr		::=	"max" sumProdMinMaxBody .
sumProdMinMaxBody	::=	["for" varIntro ["from" predArithExpr "to" predArithExpr]] ["with" predExpr] "of" predArithExpr .
quantifiedBoolTerm	::=	quantifierOp varIntroList predExpr .
setCmpTerm		::=	setExpr setCmpOp setExpr .
setFactor		::=	constSetExpr ":" typeExpr | "{" "}" | "omega"
			|	"(" setExpr ")" | "(" predExpr ":" typeExpr ")" .
setTerm			::=	setFactor {highPrecedenceBoolSetOp setFactor}
			|	unarySetOp setFactor .
setExpr			::=	setTerm {lowPrecedenceBoolSetOp setTerm} .
intParamOrConst		::=	integerConst | identifier .
realParamOrConst	::=	realConst | identifier .
stringParamOrConst	::=	stringConst | identifier .
baseConst		=	intParamOrConst | realParamOrConst | stringParamOrConst .
tuple			::=	"(" baseConst {"," baseConst} ")" .
constSetExpr		::=	"{" tuple {"," tuple} "}"
			|	"{" baseConst {"," baseConst} "}" .
highPrecedenceBoolSetOp	::=	"#" | "><" .
lowPrecedenceBoolSetOp	::=	"+" | "-" | "^" | "=>" | "<=>" .
unarySetOp		::=	"powerset" | "complement" .
quantifierOp		::=	"forall" | "exists" | "given" .
setCmpOp		::=	"sd" | "wd" .
