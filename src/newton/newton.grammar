/*
 *	Lexical elements
 */
reservedIdentifiers		::=	":" | "," | "@" | "o<" | "~" | "<" | "<=" | ">" | ">=" | "==" | "<->"
					| "**" | "*" | "/" | "+" | "-" | "<<" | ">>" | "|"
					| "-" | "English" | "constant" | "invariant" | "signal"
					| "sensor" | "name" | "symbol" | "derivation" | "none"
					| "dot" | "cross" | "derivative" | "integral" | "interface"
					| "i2c" | "spi" | "analog" | "write" | "read" | "delay" | "range"
					| "erasuretoken" | "uncertainty" | "accuracy" | "precision"
					| "Gaussian" | "exponential" | "biexponential" | "to" | "bits"
					| "dimensionless" | "include" | "(" | ")" | "{" | "}" | ";" .

zeroToNine			=	"0-9" .
oneToNine			=	"1-9" .
radix				=	oneToNine {zeroToNine} "r" .
charConst			=	"'" character "'" .
integerConst			::=	["+" | "-"] [radix] ("0" | oneToNine {zeroToNine}) | charConst .
drealConst			=	("0" | oneToNine {zeroToNine}) "." {zeroToNine} .
erealConst			=	(drealConst | integerConst) ("e" | "E") integerConst .
realConst			::=	["+" | "-"] (drealConst | erealConst) .
numericConst			::=	integerConst | realConst .
stringConst			::=	"\"" {character} "\"" .
idchar				=	char-except-rsvopseptoken .
identifier			::=	(idchar-except-zeroToNine) {idchar} .

/*
 *	Syntactic elements
 */
newtonDescription		::=	ruleList .

ruleList			::=	{rule} .
rule				::=	constantDefinition | invariantDefinition | baseSignalDefinition | sensorDefinition .

constantDefinition		::=	identifier ":" "constant" "=" numericConst [unitExpression] ";" .
invariantDefinition		::=	identifier ":" "invariant" parameterTuple  "=" "{" constraintList "}" .
baseSignalDefinition		::=	identifier ":" "signal" [subdimensionTuple] "=" "{" [nameStatement] symbolStatement derivationStatement "}" .
sensorDefinition		::=	identifier ":" "sensor" parameterTuple = "{" sensorPropertyList "}" .

nameStatement			::=	"name" "=" stringConst languageSetting ";" .
symbolStatement			::=	"symbol" "=" identifier ";" .
derivationStatement		::=	"derivation" "=" ("none" | "dimensionless" | quantityExpression) ";" .

subdimensionTuple		::=	"(" identifier ":" numericConst "to" numericConst ")" .
parameterTuple			::=	"(" parameter {"," parameter} ")" .
parameter			::=	identifier ":" identifier .

constraintList			::=	constraint {"," constraint} .
constraint			::=	quantityExpression comparisonOperator quantityExpression | identifier parameterTuple .

quantityExpression		::=	quantityTerm {lowPrecedenceOperator quantityTerm} .
quantityTerm			::=	[unaryMinus] quantityFactor {midPrecedenceOperator quantityFactor} .
quantityFactor			::=	quantity								|
					quantity [highPrecedenceOperator quantityExpression]			|
						timeOperator {timeOperator} quantityExpression			|
						"(" quantityExpression ")" .
quantity			::=	numericConst | (identifier {"@" numericConst}) .
lowPrecedenceOperator		::=	"+" | "-" .
midPrecedenceOperator		::=	"*" | "/" | vectorOp .
highPrecedenceOperator		::=	"**" .
vectorOp			::=	"dot" | "cross" .
timeOperator			::=	"derivative" | "integral" .
comparisonOperator		::=	"o<" | "~" | "<" | "<=" | ">" | ">=" | "==" | "<->" .
unaryMinus			::=	"-" .
languageSetting			::=	"English" .

unitExpression			::=	unitTerm .
unitTerm			::=	unitFactor {midPrecedenceOperator unitFactor} .
unitFactor			::=	[unaryMinus] (unit [highPrecedenceOperator numericConst] | "(" unitExpression ")") .
unit				::=	identifier .

sensorPropertyList		::=	sensorProperty {"," sensorProperty} .
sensorProperty			::=	rangeStatement | uncertaintyStatement | erasureValueStatement | accuracyStatement | precisionStatement | sensorInterfaceStatement .
sensorInterfaceStatement	::=	"interface" identifier ["@" numericConst "*" "bits"] "==" sensorInterfaceType parameterTuple ["{" sensorInterfaceCommandList "}"] .
sensorInterfaceType		::=	"i2c" | "spi" | "analog" .
sensorInterfaceCommandList	::=	sensorInterfaceCommand {";" sensorInterfaceCommand} .
sensorInterfaceCommand		::=	readRegisterCommand | writeRegisterCommand | delayCommand | arithmeticCommand .
readRegisterCommand		::=	identifier "=" "read" ["[" numericConst "]"] numericConst .
writeRegisterCommand		::=	"write" numericConst numericConst .
delayCommand			::=	"delay" numericConst .
arithmeticCommand		::=	identifier "=" expression .
rangeStatement			::=	"range" identifier "==" "[" numericConst [unitExpression] "," numericConst [unitExpression] "]" .
uncertaintyStatement		::=	"uncertainty" identifier "==" expression [unitExpression] .
erasureValueStatement		::=	"erasuretoken" identifier "==" numericConst [unitExpression] .
accuracyStatement		::=	"accuracy" identifier "==" numericConstTupleList .
precisionStatement		::=	"precision" identifier "==" numericConstTupleList .
numericConstTupleList		::=	"{" numericConstTuple {"," numericConstTuple} "}" .
numericConstTuple		::=	"(" numericConst [unitExpression] ".." numericConst ")" .

expression			::=	term {lowPrecedenceBinaryOp term} .
term				::=	[unaryOp] factor ["++" | "--"] {highPrecedenceBinaryOp factor} .
factor				::=	numericConst | "(" expression ")" | distributionFactor | identifier ["[" numericConst "]"].
distributionFactor		::=	distribution parameterValueList .
parameterValueList		::=	"(" identifier ":" expression {"," identifier ":" expression} .
distribution			::=	"Gaussian" | "exponential" | "biexponential" .
highPrecedenceBinaryOp		::=	"*" | "/" | "%" | "**" .
lowPrecedenceBinaryOp		::=	"+" | "-" | ">>" | "<<" | "|" .
unaryOp				::=	"-"  | "+" .
